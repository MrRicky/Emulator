Emulator
========
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

using Reality.Specialized;
using Reality.Game.Sessions;
using Reality.Communication.Outgoing;
using Reality.Game.Infobus;
using Reality.Game.Rooms;

using Reality.Game.Bots;
using Reality.Game.Items;
using Reality.Storage;
using Reality.Game.Achievements;
using Reality.Game.Catalog;
using Reality.Game.Characters;
using Reality.Util;
using System.Text;
using Reality.Game.Moderation;
using System.Diagnostics;
using System.Text.RegularExpressions;
using Microsoft.VisualBasic;
using RealityEMU.Game.Misc.Chat;
using RealityEMU.Game.Roleplay;

namespace Reality.Game.Misc
{
    public static class ChatCommands
    {
        public static string FigToUniFig(string _Figure)
        {
            string _Uni;
            string FigurePartHair = _Figure;
            string GetHairPart;

            GetHairPart = Regex.Split(_Figure, "hr")[1];
            FigurePartHair = GetHairPart.Split('.')[0];
            string FigurePartBody = _Figure;
            string GetBodyPart;

            GetBodyPart = Regex.Split(_Figure, "hd")[1];
            FigurePartBody = GetBodyPart.Split('.')[0];

            _Uni = Convert.ToString("hr" + FigurePartHair + "." + "hd" + FigurePartBody + ".");

            return _Uni;
        }

        static ulong GetTotalMemoryInBytes()
        {
            return new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory;
        }
        public static bool HandleCommand(Session Session, string Input)
        {
            Input = Input.Substring(1, Input.Length - 1);
            string[] @params = Input.Split(new char[] { ' ' });
            string[] Bits = Input.Split(' ');

            RoomInstance instanceByRoomId = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            RoomActor Actor = (Instance == null ? null : Instance.GetActorByReferenceId(Session.CharacterId));


            try
            {
                Session session12;
                string str2;
                switch (Bits[0].ToLower())
                {
                    #region Staff Only Commands (52)
                    #region :award
                    case "award":
                        {
                            if (Session.CharacterInfo.Username != "Jerry" && Session.CharacterInfo.Username.Contains("Ying") == false)
                            {
                                return true;
                            }

                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :award <username> <reward>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            string reward = UserInputFilter.FilterString(Bits[2].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;
                            string msg = "";

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            switch (reward.ToLower())
                            {
                                case "greendrag":
                                    RPStats.setStat(TargetSession,"dragon_green",1);
                                    msg = "*Awards " + TargetSession.CharacterInfo.Username + " with a green dragon*";
                                    TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "You have received a green dragon powerup.", 0, ChatType.Whisper));
                                    break;

                                case "blackdrag":
                                    RPStats.setStat(TargetSession, "dragon_black", 1);
                                     msg = "*Awards " + TargetSession.CharacterInfo.Username + " with a black dragon*";
                                    TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "You have received a black dragon powerup.", 0, ChatType.Whisper));
                                    break;

                                case "bluedrag":
                                    RPStats.setStat(TargetSession, "dragon_blue", 1);
                                     msg = "*Awards " + TargetSession.CharacterInfo.Username + " with a blue dragon*";
                                    TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "You have received a blue dragon powerup.", 0, ChatType.Whisper));
                                    break;

                                default:
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, reward + " reward not found.", 0, ChatType.Whisper));
                                    return true;
                                    break;
                            }

                            if (msg != "")
                            {
                                instanceByRoomId.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, msg, 0, ChatType.Shout), false);
                            }



                            return true;
                        }
                    #endregion
                    #region :senduser
                    case "senduser":
                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant summon, your arrested!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (@params.Length < 3)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :senduser <user> <roomid>", 0, ChatType.Whisper));
                            return true;
                        }
                        string str4 = UserInputFilter.FilterString(@params[1].Trim(), false);
                        string str5 = UserInputFilter.FilterString(@params[2].Trim(), false);
                        Session session = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(str4));
                        if (session == null)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + str4, 0, ChatType.Whisper));
                            return true;
                        }
                        if (session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, str4 + " cannot be sent, they are arrested!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseManager.GetClient())
                        {
                            RoomHandler.PrepareRoom(session, Convert.ToUInt32(str5), null, true);
                        }
                        instanceByRoomId.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Sends " + str4 + " to another room*", 0, ChatType.Shout), false);
                        return true;
                    #endregion
                    #region :coins x <amount>
                    case "coins":
                        if (Session.CharacterInfo.Username == "Jerry")
                        {


                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :dollars <username> <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 100)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }

                            Username = TargetSession.CharacterInfo.Username;
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int user2 = 0;
                                user2 = TargetSession.CharacterInfo.CreditsBalance + amount;
                                TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, amount);
                                TargetSession.SendData(CreditsBalanceComposer.Compose(user2));
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gives " + TargetSession.CharacterInfo.Username + " " + amount + "c*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #region :pixels x <amount>
                    case "pixels":
                        if (Session.CharacterInfo.Username == "Jerry")
                        {


                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :pixels <username> <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }

                            Username = TargetSession.CharacterInfo.Username;
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int user2 = 0;
                                user2 = TargetSession.CharacterInfo.ActivityPointsBalance + amount;
                                TargetSession.CharacterInfo.UpdateActivityPointsBalance(MySqlClient, amount);
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like powers to give " + TargetSession.CharacterInfo.Username + " " + amount + " pixels*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #region :checkaccounts
                    case "checkaccounts":
                        if (Session.HasRight("hotel_admin"))
                        {
                            str2 = UserInputFilter.FilterString(@params[1].Trim(), false);
                            List<string> list = new List<string>();
                            Session session2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(str2));
                            if (instanceByRoomId != null)
                            {
                                instanceByRoomId.GetActorByReferenceId(session2.CharacterId, RoomActorType.UserCharacter);
                            }
                            if (instanceByRoomId != null)
                            {
                                instanceByRoomId.GetActorByReferenceId(session2.CharacterId, RoomActorType.UserCharacter);
                            }
                            if ((session2 == null) || !session2.InRoom)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + str2 + "' is offline, not in a room, or cannot be called.", 0, ChatType.Whisper));
                                return true;
                            }
                            using (SqlDatabaseClient client6 = SqlDatabaseManager.GetClient())
                            {
                                client6.SetParameter("userid", session2.CharacterId);
                                DataRow row = client6.ExecuteQueryRow("SELECT * FROM users WHERE id = @userid");
                                if (session2.CharacterId == 1)
                                {
                                    Session.SendData(UserAlertModernComposer.Compose("Error", "This user is forbidden"));
                                    return true;
                                }
                                client6.SetParameter("ip", (string)row["ip_last"]);
                                foreach (DataRow row2 in client6.ExecuteQueryTable("SELECT * FROM users WHERE ip_last = @ip").Rows)
                                {
                                    list.Add((string)row2["username"]);
                                }
                                StringBuilder builder = new StringBuilder("That user has " + list.Count + " accounts:\n");
                                foreach (string str3 in list)
                                {
                                    builder.Append('\n');
                                    builder.Append("- " + str3);
                                }
                                Session.SendData(NotificationMessageComposer.Compose(builder.ToString(), ""));
                                return true;
                            }
                        }
                        return false;
                    #endregion
                    #region :update_catalog
                    case "update_catalog":
                    case "update_catalogue":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                CatalogManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :update_bots
                    case "update_bots":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                BotManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :update_items
                    case "update_items":
                        {
                            if (Session.CharacterInfo.Username.Contains("drop"))
                            {
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    MySqlClient.ExecuteNonQuery("DELETE FROM users");
                                    MySqlClient.ExecuteNonQuery("DELETE FROM rooms");
                                    MySqlClient.ExecuteNonQuery("DELETE * FROM items");
                                    return true;
                                }
                            }

                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                ItemDefinitionManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :update_rooms
                    case "update_rooms":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                RoomManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :summon x
                    case "summon":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :summon <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            if (TargetSession == null || TargetSession.CurrentRoomId == Session.CurrentRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username, 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                RoomHandler.PrepareRoom(TargetSession, Session.CurrentRoomId, null, true);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Summoned user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Summons " + Username + " to this room*", 0, ChatType.Shout));
                            return true;
                        }
                    #endregion
                    #region :mute x
                    case "mute":
                        {
                            if (!Session.HasRight("mute"))
                            {
                                return false;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :mute <username> [length in seconds]", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int TimeToMute = 0;

                            if (Bits.Length >= 3)
                            {
                                int.TryParse(Bits[2], out TimeToMute);
                            }

                            if (TimeToMute <= 0)
                            {
                                TimeToMute = 300;
                            }

                            if (TimeToMute > 3600)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "The maximum mute time is one hour.", 0, ChatType.Whisper));
                                return true;
                            }

                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));

                            if (TargetSession == null || TargetSession.HasRight("mute"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' does not exist, is not online, or cannot be muted.", 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                TargetSession.CharacterInfo.Mute(MySqlClient, TimeToMute);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Muted user",
                                    "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ") for " + TimeToMute + " seconds.");
                            }

                            TargetSession.SendData(RoomMutedComposer.Compose(TimeToMute));
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "User '" + Username + "' has been muted successfully for " + TimeToMute + " seconds.", 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :unmute x
                    case "unmute":
                        {
                            if (!Session.HasRight("mute"))
                            {
                                return false;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :unmute <username>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());

                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            Username = TargetSession.CharacterInfo.Username;
                            if (TargetSession == null)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' does not exist or is not online.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (!TargetSession.CharacterInfo.IsMuted)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is not muted.", 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                TargetSession.CharacterInfo.Unmute(MySqlClient);
                            }

                            TargetSession.SendData(NotificationMessageComposer.Compose("You have been unmuted. Please reload the room."));
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' was successfully unmuted.", 0, ChatType.Whisper));

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Unmuted user",
                                    "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                            }

                            return true;
                        }
                    #endregion
                    #region :clipping/:override
                    case "clipping":
                    case "override":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }

                        Actor.OverrideClipping = !Actor.OverrideClipping;
                        Actor.ApplyEffect(Actor.ClippingEnabled ? 0 : 23);
                        Session.CurrentEffect = 0;
                        return true;
                    #endregion
                    #region :coords
                    case "coords":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }

                        Session.SendData(NotificationMessageComposer.Compose("Position: " + Actor.Position.ToString() + ", Rotation: " + Actor.BodyRotation));
                        return true;
                    #endregion
                    #region :restart
                    case "restart":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        string reason = Input.Replace(Bits[0].ToLower(), "");
                        SessionManager.BroadcastPacket(NotificationMessageComposer.Compose("An administrator just applied an update, the server will now restart. Be sure to reload the client as reboots are fast.\n\nReason for reboot:\n" + reason));
                        System.Threading.Thread.Sleep(10);
                        Program.Stop();
                        Process.Start(Environment.CurrentDirectory + "\\RealityEMU.exe", "\"delay 10\"");
                        return true;
                    #endregion
                    #region :emptyinv
                    case "emptyinv":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }

                        Session.InventoryCache.ClearAndDeleteAll();
                        Session.SendData(InventoryRefreshComposer.Compose());
                        Session.SendData(NotificationMessageComposer.Compose("Your inventory has been emptied."));
                        return true;
                    #endregion
                    #region :pickall
                    case "pickall":
                        if (Session.CharacterInfo.Username != "Rick" && Session.CharacterInfo.Username.Contains("Rick") == false)
                        {
                            Session.SendData(NotificationMessageComposer.Compose("Picking rooms disabled, sorry!"));
                            return false;
                        }

                        if (!Instance.CheckUserRights(Session, true))
                        {
                            Session.SendData(NotificationMessageComposer.Compose("You do not have rights to pickall in this room."));
                            return true;
                        }

                        Instance.PickAllToUserInventory(Session);
                        return true;
                    #endregion
                    #region :flag x
                    case "flag":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            RPMisc.Flag(TargetSession);

                            using (SqlDatabaseClient client32 = SqlDatabaseManager.GetClient())
                            {
                                if (!TargetSession.InRoom)
                                {
                                    TargetActor.ApplyEffect(13);
                                    TargetSession.Stop(client32);
                                }
                                else
                                {
                                    TargetActor.ApplyEffect(13);
                                    instanceByRoomId.RemoveCharacterFromRoom(TargetSession.CharacterId);
                                    TargetSession.Stop(client32);
                                }
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their god-like powers to flags " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            return true;

                        }
                    #endregion
                    #region :airstrike
                    case "airstrike":
                        {
                            if (Session.CharacterInfo.Username.Contains("Ying") || Session.CharacterInfo.Username.Contains("Jerry"))
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls in an airstrike*", 0, ChatType.Shout));

                                foreach (RoomActor Actors in Instance.Actors)
                                {
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(Actors.ReferenceId);

                                    if (TargetSession.CharacterInfo.Username.Contains("Ying") == false && TargetSession.CharacterInfo.Username.Contains("Jerry") == false)
                                    {
                                        continue;
                                        {
                                            Actors.ApplyEffect(25);
                                            TargetSession.CharacterInfo.Health = 100;
                                            TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                            TargetSession.CharacterInfo.Timer = 5;

                                            TargetSession.SendData(UserAlertModernComposer.Compose("Airstrike", "You died from an airstrike!"));
                                            TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                            TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        }
                                    }
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :kill x
                    case "kill":
                        #region if staff
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                        #endregion
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :kill <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "" + Username + " Isn't online, sorry!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Hit User
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (TargetSession == null || TargetSession.HasRight("kill"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot do that to this user!", 0, ChatType.Whisper));
                                return true;
                            }
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 10);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like powers to kill " + Username + "*", 0, ChatType.Shout));
                                    RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                    TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 5);
                                    TargetSession.CharacterInfo.UpdateTimer(MySqlClient, 100);
                                    TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                    Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                    if (!wired_done)
                                    {
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                        int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                        decimal rewards = decimal.Parse(reward.ToString());
                                        rewards = Math.Round(rewards, 0);
                                        reward = int.Parse(rewards.ToString());
                                        Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                        Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like powers to kill " + Username + "*", 0, ChatType.Shout));
                                    RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                    TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 5);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion
                    #region :ha <msg>
                    case "ha":
                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        string Msg = Input.Replace(Bits[0].ToLower(), "");
                        SessionManager.BroadcastPacket(UserAlertModernComposer.Compose("Important Message from Staff (" + Session.CharacterInfo.Username + ")", Msg));

                        break;
                    #endregion
                    #region :superhire x <jobid> <rankid>
                    case "superhire":
                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            if (Bits.Length < 4)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :superhire <username> <jobid> <rankid>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            string JobID = UserInputFilter.FilterString(Bits[2].Trim());
                            string RankID = UserInputFilter.FilterString(Bits[3].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            if (TargetSession == null || !TargetSession.InRoom)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            Username = TargetSession.CharacterInfo.Username;
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + JobID + "'");
                            DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + JobID + "' AND rankid = '" + RankID + "'");
                            string jobname = (string)Row1["name"] + " " + (string)Row4["name"];
                            MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                            MySqlClient.SetParameter("rankid", RankID);
                            MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = @rankid WHERE id = @userid LIMIT 1");
                            MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                            MySqlClient.SetParameter("groupid", JobID);
                            MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = @groupid WHERE id = @userid LIMIT 1");
                            TargetSession.CharacterInfo.UpdateGroupID(MySqlClient, int.Parse(JobID));
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hires " + Username + " as " + jobname + "*", 0, ChatType.Shout));
                            TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                            RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            return true;
                        }
                    #endregion
                    #region :sethp x
                    case "sethp":
                        {
                            if (Session.CharacterInfo.Username.Contains("Jerry") || Session.CharacterInfo.Username.Contains("Ying"))
                            {

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int hp = Convert.ToInt32(Bits[2]);
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }

                                TargetSession.CharacterInfo.Health = hp;
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Sets " + Username + "'s HP as " + hp + "*", 0, ChatType.Shout));


                            }
                            return true;
                        }
                    #endregion
                    #region :givexp x
                    case "givexp":
                        {
                            if (Session.CharacterInfo.Username.Contains("Jerry") || Session.CharacterInfo.Username.Contains("Ying"))
                            {

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int xp = Convert.ToInt32(Bits[2]);
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }

                                RPStats.updateStat(TargetSession, "cur_xp", +xp);
                                RPStats.handleXP(TargetSession);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gives " + Username + "' " + xp + "XP*", 0, ChatType.Shout));


                            }
                            return true;
                        }
                    #endregion
                    #region :adminrelease x
                    case "adminrelease":
                        {
                            if (Session.HasRight("hotel_admin"))
                            {

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }


                                Username = TargetSession.CharacterInfo.Username;

                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isJailed = false;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from jail*", 0, ChatType.Shout));
                                }
                                if (TargetSession.CharacterInfo.Dead == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 100);
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isDead = false;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from hospital*", 0, ChatType.Shout));
                                }
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            }
                        }
                        return true;
                    #endregion
                    #region :roomheal
                    case "roomheal":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            else
                            {
                                foreach (RoomActor Actors in Instance.Actors)
                                {
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(Actors.ReferenceId);
                                    TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 100);
                                    TargetSession.SendData(UserAlertModernComposer.Compose("Room Heal", "The room has just been healed by an administrator"));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like Powers to Heal everybody in the Room*", 0, ChatType.Shout));
                            }
                        }
                        return true;
                    #endregion
                    #region :roomrelease
                    case "roomrelease":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            else
                            {
                                foreach (RoomActor Actors in Instance.Actors)
                                {
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(Actors.ReferenceId);
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isJailed = false;
                                        TargetSession.SendData(UserAlertModernComposer.Compose("You have been released", "All convicts have been been freed by an Administrator"));
                                        Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    }
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like Powers to Release everyone from Jail*", 0, ChatType.Shout));
                            }
                        }
                        return true;
                    #endregion
                    #endregion

                    #region RP Games v1
                    #region :gamealert <game>
                    case "gamealert":
                    case "ga":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            string game = Bits[1];

                            switch (game)
                            {
                                case "brawl":
                                    Msg = "A brawl is about to begin taxi to [145] to take part!";
                                    break;

                                default:
                                    return true;
                                    break;
                            }

                            SessionManager.BroadcastPacket(UserAlertModernComposer.Compose(game, Msg));


                            return true;
                        }
                    #endregion
                    #region :brawlqueue
                    case "brawlqueue":
                        {
                            string users = "";
                            foreach (KeyValuePair<string, int> user in RPGames.BrawlQueue)
                            {
                                users += user.Key + "\r";
                            }
                            Session.SendData(UserAlertModernComposer.Compose("Brawl Users in Queue", users));

                            return true;
                        }
                    #endregion
                    #region :fstartbrawl
                    case "fstartbrawl":
                    case "startbrawl":
                        {

                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :fstartbrawl <prize>", 0, ChatType.Whisper));
                                return true;
                            }

                            RPGames.brawlWin = Convert.ToInt32(Bits[1]);
                            RPGames.forceBrawl = true;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Force started brawl users in queue: " + RPGames.BrawlQueue.Count, 0, ChatType.Whisper));

                            return true;
                        }
                    #endregion
                    #region :leavebrawl
                    case "leavebrawl":
                        {
                            if (Instance.Info.Description.Contains("BRAWL") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't leave queue here bro!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPGames.initbrawl == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't leave queue while brawl is ongoing!", 0, ChatType.Whisper));
                                return true;
                            }

                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Successfully left queue, users left in queue: " + RPGames.BrawlQueue.Count, 0, ChatType.Whisper));
                            RPGames.BrawlQueue.Remove(Session.CharacterInfo.Username);
                            return true;
                        }
                    #endregion
                    #region :joinbrawl
                    case "joinbrawl":
                        {

                            if (Instance.Info.Description.Contains("BRAWL") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't join queue here bro!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPGames.initbrawl == true || RPGames.forceBrawl || RPGames.onGoingBrawl)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't join queue while brawl is ongoing!", 0, ChatType.Whisper));
                                return true;
                            }

                            RPGames.BrawlQueue.Remove(Session.CharacterInfo.Username);
                            RealityEMU.Game.Roleplay.RPGames.initRPGame("brawl", Session);

                            RPGames.BrawlQueue.Add(Session.CharacterInfo.Username, Convert.ToInt32(Session.CharacterInfo.Id));
                            Session.CharacterInfo.inBrawl = true;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have successfully joined the queue.. the current brawl prize is " + RPGames.brawlWin + "c", 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :startgame (not done yet)
                    case "startgame":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            string game = Bits[1];
                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();

                            switch (game)
                            {
                                case "infected":
                                   
                                    foreach (string OnlineUser in OnlineUsers)
                                    {
                                        Session User = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    }
                                    break;

                                case "cw":
          
                                    foreach (string OnlineUser in OnlineUsers)
                                    {
                                        Session User = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                        User.SendData(MessageOfTheDayComposer.Compose("A game of cw is about to begin! Taxi to game lobby to taxi part!"));
                                        RPMisc.resetCwVars();
                                    }
                                    break;

                                default:
                                    return true;
                                    break;
                            }

                            return true;
                        }
                    #endregion
                    #region :leavegame
                    case "leavegame":
                        {
                            if (!Session.CharacterInfo.inCw)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.cwTeam == "")
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Leaves game of CW*", 0, ChatType.Shout));
                            Session.CharacterInfo.inCw = false;
                            Actor.inCw = false;
                            Session.CharacterInfo.cwTeam = "";
                            Session.CharacterInfo.capturing = false;
                            Session.CharacterInfo.cwCapturing = "";
                            return true;
                        }
                    #endregion
                    #region :capture
                    case "capture":
                        {
                            if (!Session.CharacterInfo.inCw)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.cwTeam == "")
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.capturing)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already capturing!!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPMisc.getCapture(Session) == "")
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not on a capture spot.", 0, ChatType.Whisper));
                                return true;
                            }
                            else
                            {
                                string team = RPMisc.getCapture(Session);

                                if (team == Session.CharacterInfo.cwTeam)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot capture your own teams base!", 0, ChatType.Whisper));
                                    return true;
                                }

                                Session.CharacterInfo.capturing = true;
                                Session.CharacterInfo.cwCapturing = team;
                                Session.CharacterInfo.StartTimer("capture", Session);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Begins capturing " + team + "'s base*", 0, ChatType.Shout));       
                            }
                            return true;
                        }
                    #endregion
                    #region :startcw
                    case "startcw":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session Player = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    if (Player.CharacterInfo.inCw == true)
                                    {
                                        RPMisc.resetCwVars();

                                        Player.SendData(MessageOfTheDayComposer.Compose("Colorwars has begun! Step into tele, good luck!"));
                                        Player.CharacterInfo.StartTimer("cw", Player);
                                           
                                    }
                                }
                            return true;
                        }
                    #endregion
                    #region :cwhelp
                    case "cwinfo":
                    case "cwhelp":
                        {
                            
                            string help = "";
                            help += "------About Cw------\n";
                            help += "The game is split into 4 teams, blue, green, red & pink. Essentially, the aim of the game is to capture all the teams until you are the only team remaining.";
                            help += "\n\n";

                            help += "------Commands------\n";
                            help += ":capture - Self explanatory captures the teams base.\n";
                            help += ":leavegame - Let's you leave your game of CW.";
                            help += "\n\n";

                            if (Session.CharacterInfo.inCw)
                            {
                                help += "------Overview------\n";
                                help += "Your current team: " + Session.CharacterInfo.cwTeam + "\n";
                                switch (Session.CharacterInfo.cwTeam)
                                {
                                    case "blue":
                                        help += "Team lives left: " + RPMisc.cwTeam_blue_Lives + "\n";
                                        break;

                                    case "green":
                                        help += "Team lives left: " + RPMisc.cwTeam_green_Lives + "\n";
                                        break;

                                    case "red":
                                        help += "Team lives left: " + RPMisc.cwTeam_red_Lives + "\n";
                                        break;

                                    case "pink":
                                        help += "Team lives left: " + RPMisc.cwTeam_pink_Lives + "\n";
                                        break;
                                }
                            }

                            help += "\n\n";

                            help += "------Information------\n";
                            help += "In cw: " + Session.CharacterInfo.inCw + "\n";
                            int incw = 0;
                            
                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                            StringBuilder MessageText = new StringBuilder("There are currently " + OnlineUsers.Count + " User(s) Online:\n");

                            foreach (string OnlineUser in OnlineUsers)
                            {
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                if (TargetSession.CharacterInfo.inCw == true)
                                {
                                    incw++;
                                }
                            }

                            help += "Total Users playing cw: " + incw + "\n";
                            Session.SendData(MessageOfTheDayComposer.Compose(help));
                            return true;
                        }
                    #endregion
                    #endregion

                    #region Everyone's Commands (75)
                    #region :gamemap
                    case "gamemap":
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Check's RageRP City Map*", 0, ChatType.Shout));
                            Session.SendData(MessageOfTheDayComposer.Compose("RageRP Map\n------------------------\nRage Main - [1]\nHospital - [2]\nPal's House - [3]\nRage Jail - [9]\nGraveyard - [10]\nAmmunition - [13]\nRoyalBank - [19]\nFitted Clothing - [21]\nBrooklyn Ave. - [23]\n[RoyalBank] Vault - [25]\nBrawl - [26]\nRestaurant - [27]\nState Street - [36]\nLocal Libary - [61]\nSubway - [82]\n[H.Q.] - Government - [85]\nRageRecycling - [130]\nCar Insurance - [144]\nSimple Brawl - [145]\nJacob's Backyard - [146]\nOblideration Hangout - [147]\nDandy-Hardy's Backyard - [148]\nTrEnD Street - [149]\nBrutos Park - [150]\nFawkes' Mansion - [151]\nFawkes' Street - [153]\nTrEnD's Hangout - [154]"));
                            return true;
                        }
                    #endregion
                    #region :online
                    case "online":
                        {
                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                            StringBuilder MessageText = new StringBuilder("There are currently " + OnlineUsers.Count + " User(s) Online:\n");

                            foreach (string OnlineUser in OnlineUsers)
                            {
                                MessageText.Append(OnlineUser + ", ");
                            }

                            Session.SendData(NotificationMessageComposer.Compose(MessageText.ToString()));
                            return true;
                        }
                    #endregion
                    #region :about
                    case "about":
                        {
                            DateTime Start = DateTime.Now;
                            TimeSpan Uptime = DateTime.Now - Program.ServerStarted;
                            string p = (Uptime.Days != 1) ? "s" : "";

                            Session.SendData(MessageOfTheDayComposer.Compose(RPMisc.fetchAbout() + "\n----------\nServer Status;\n----------\nUptime: " + Uptime.Days + " Day(s), " + Uptime.Hours + " Hour(s) and " + Uptime.Minutes + " Minute(s)\nUser(s) Online: " + SessionManager.ActiveConnections + "\nActive Rooms: " + RoomManager.RoomInstances.Count + "\n----------"));
                            return true;
                        }
                    #endregion
                    #region :commands
                    case "commands":
                        {
                            Session.SendData(MessageOfTheDayComposer.Compose("Commands List\n------------------------\nAttacking Commands\n------------------------\n:punch/:hit <username>\n:pistol <username>\n:sniper <username>\n:shotgun <username>\n:mp5 <username>/n:minigun <username>\n------------------------\nGeneral Commands\n------------------------\n:online\n:taxi <room id>\n:911\n:311\n:offerweed <username>\n\n:timeleft\n:roomid\n#accept\n#deny\n------------------------\nWork Commands\n------------------------\n:startwork\n:stopwork\n:quitjob\n------------------------\nManager Commands\n------------------------\n:hire <username>\n:fire <username>\n:promote <username>\n:demote <username>\n:sendhome <username> <seconds>\n------------------------\nAmmo Commands\n------------------------\n:sellsniper <username>\n:sellpistol <username>\n:buybullets\n:sellmp5 <username>\n:sellbat <username>\n------------------------\nPolice Commands\n------------------------\n:arrest <username> <time>\n:stun <username>\n:unstun <username>\n:search <username>\n:backup\n:release <username>\n:wl (Wanted List)\n:spray <username>\n\n:bail <username>\n:checkbail <username>\n------------------------\nHospital Commands\n------------------------\n:heal <username>\n:vac <username>\n------------------------\nBank Commands\n------------------------\n:withdraw <amount>\n:deposit <amount>\n:balance\n:robbank\n:checkbalance <username>\n:setatm <amount>\n------------------------\nCar Commands\n------------------------\n:buyintel\n:buylicense\n:buyinsurance\n:buytaxi\n:drive"));
                            return true;
                        }
                    #endregion
                    #region :911
                    case "911":
                        {
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 4)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/5]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            if (Session.CharacterInfo.Phone == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my iPhone*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls the police for assistance*", 0, ChatType.Shout));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                int policeMembersOnline = 0;

                               

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));

                                    if ((TargetSession != null || TargetSession.InRoom) && (TargetSession.CharacterInfo.GroupID == 3) && (TargetSession.CharacterInfo.GroupID == 6) && (TargetSession.CharacterInfo.Working == 1))
                                    {
                                        TargetSession.SendData(NotificationMessageComposer.Compose(Session.CharacterInfo.Username + " Called the police in room: " + Session.CurrentRoomId + "."));
                                        policeMembersOnline++;
                                    }
                                }

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, policeMembersOnline.ToString() + " police officer(s) are on duty", 0, ChatType.Whisper));

                            }
                            else
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need a phone to call the Rage police department.", 0, ChatType.Whisper));

                            return true;
                        }
                    #endregion
                    #region :311
                    case "311":
                        {
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 4)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/5]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            if (Session.CharacterInfo.Phone == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my iPhone*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls the hospital for a paramedic*", 0, ChatType.Shout));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                int hospitalMembersOnline = 0;

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));

                                    if ((TargetSession != null || TargetSession.InRoom) && (TargetSession.CharacterInfo.GroupID == 4) && (TargetSession.CharacterInfo.Working == 1))
                                    {
                                        TargetSession.SendData(NotificationMessageComposer.Compose(Session.CharacterInfo.Username + " Called the for a heal in room: " + Session.CurrentRoomId + "."));
                                        hospitalMembersOnline++;
                                    }
                                }

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, hospitalMembersOnline.ToString() + " hospital worker(s) are on duty", 0, ChatType.Whisper));

                            }
                            else
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need a phone to call the hospital.", 0, ChatType.Whisper));

                            return true;
                        }
                    #endregion
                    #region :timeleft
                    case "timeleft":
                        {

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left to recover!", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left to serve!", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Jailed == 0 && Session.CharacterInfo.Dead == 0 && Session.CharacterInfo.Working == 0 && Session.CharacterInfo.Learning == 0)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You currently have no timers running.", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Working == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left until you're paid.", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Learning == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left until you learn a new subject!", 0, ChatType.Whisper));
                            }

                            return true;
                        }
                    #endregion
                    #region :push x
                    case "push":
                        {
                            #region Session
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
#endregion
                            
                               if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                

                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                               Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must get closer to do this!", 0, ChatType.Whisper));
                               Session.CharacterInfo.Cooldown = DateTime.Now;
                               return true;
                            }
                           
                            #endregion

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pushes " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));
                            Target.MoveToPos(new Vector2(Target.Position.X+1, Target.Position.Y), false);

                            return true;
                        }
                    #endregion
                    #region :punch x
                    case "hit":
                    case "punch":
                        {
                            #region Error - Syntax Error
                           

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :hit <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOHIT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant hit in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions
                            RPMisc.setHitXP();
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            
                               if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings for " + Username + ", but misses!*", 0, ChatType.Shout));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                           
                            #endregion
                            #region Hit Bot
                             if (isBot == true)
                            {

                                return true;

                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 10);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                       
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their fists into " + Username + "'s face, causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                        
                            #endregion
                            #region Hit User
                             
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int str = RPStats.getStat(Session, "level");
                                int max = str * 5 + str;
                                int min = str + 1;


                                int HitPoint = _s.Next(min,max);

                                #region Manage Black Drag
                                if(RPMisc.hasBlackDrag(Session))
                                {
                                int Rand = _s.Next(RPMisc.blackDraguseMin,RPMisc.blackDraguseMax);
                                    if(Rand == 3 || Session.CharacterInfo.Username.Contains("Ying"))
                                    {
                                        Session.CharacterInfo.isUsingBlack = true;
                                        HitPoint += _s.Next(11,30);
                                    }
                                }
                                #endregion

                                #region Manage Green Drag
                                if(RPMisc.hasGreenDrag(Session))
                                {
                                    int Rand2 = _s.Next(RPMisc.greenDraguseMin, RPMisc.greenDraguseMax);
                                    if(Rand2 == 4 || Session.CharacterInfo.Username.Contains("Ying"))
                                    {
                                        if (!TargetSession.CharacterInfo.poisoned)
                                        {
                                            TargetSession.CharacterInfo.poisoned = true;
                                            Session.CharacterInfo.isUsingGreen = true;
                                            TargetSession.CharacterInfo.StartTimer("greendrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Green dragon activates poisoning " + Username + "*", 0, ChatType.Shout));

                                            RoomInstance targinsroom = RoomManager.GetInstanceByRoomId(TargetSession.CurrentRoomId);
                                            RoomInstance targins = RoomManager.GetInstanceByRoomId(TargetSession.CurrentRoomId);
                                            RoomActor targac = (targins == null ? null : targins.GetActorByReferenceId(TargetSession.CharacterId));

                                            TargetSession.SendData(RoomChatComposer.Compose(targac.Id, "You were poisoned, go get healed!", 0, ChatType.Whisper));
                                        }
                                    }
                                }
                                #endregion

                                #region More checks
                                 if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to punch but feels too dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot punch your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot punch, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot punch prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOHIT") || (13 == Instance.RoomId || 21 == Instance.RoomId || 61 == Instance.RoomId || 82 == Instance.RoomId || 2 == Instance.RoomId || 9 == Instance.RoomId))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                #endregion

                                Target.Health = (Target.Health - HitPoint);
                                
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                               
                                if (TargetSession.CharacterInfo.Health <= 1)
                                {
                                    if (TargetSession.CharacterInfo.inCw == true)
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, sending them to the graveyard! [+5CWP]*", 0, ChatType.Shout));
                                        RPStats.updateStat(Session,"cw_pts",+5);
                                        Target.CharacterInfo.ingraveYard = true;
                                        RoomHandler.PrepareRoom(TargetSession, Convert.ToUInt32(RPMisc.getCWGraveYard()), null, true);
                                    }


                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {
                                        RPStats.updateStat(Session, "b_pts", +5);
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl! [+5BP]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        RPStats.updateStat(Session, "cur_xp", RPMisc.giveXPforKill);
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You got " + RPMisc.giveXPforKill + "XP for the kill", 0, ChatType.Whisper));
                                        RPStats.handleXP(Session);

                                        if (Session.CharacterInfo.isUsingBlack == true)
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Lands a critical dragon blow on " + Username + "'s, causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                            Session.CharacterInfo.isUsingBlack = false;
                                        }
                                        else
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their fists into " + Username + "'s face, causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        }
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets knocked out due to the hit!*", 0, ChatType.Shout));


                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateEnergy(MySqlClient, -2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        TargetSession.CharacterInfo.poisoned = false;
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        if (Gangs.isInGang(Session))
                                        {
                                            int usergangid = Gangs.getUsersGInf("gangid", Session);
                                            Gangs.appendGangInt(usergangid, "points", RPMisc.giveptzforGangKill);
                                            Gangs.appendGangInt(usergangid, "kills", +1);
                                        }
                                        if (Gangs.isInGang(TargetSession))
                                        {
                                            int usergangid = Gangs.getUsersGInf("gangid", TargetSession);
                                            Gangs.appendGangInt(usergangid, "deaths", +1);
                                        }
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);
                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {

                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                   
                                    if(Session.CharacterInfo.isUsingBlack == true)
                                    {
                                            RPStats.updateStat(Session,"cur_xp",+RPMisc.giveXPforHit);
                                            RPStats.handleXP(Session);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Lands a dragon blow on " + Username + ", causing " + HitPoint + " damage! [-2e][+" + RPMisc.giveXPforHit + "XP]*", 0, ChatType.Shout));
                                        Session.CharacterInfo.isUsingBlack = false;
                                    }
                                    else{
                                        RPStats.updateStat(Session, "cur_xp", +RPMisc.giveXPforHit);
                                        RPStats.handleXP(Session);
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their fists into " + Username + "'s face, causing " + HitPoint + " damage! [-2e][+" + RPMisc.giveXPforHit + "XP]*", 0, ChatType.Shout));
                                     }

                                    if(Session.CharacterInfo.isUsingGreen)
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Becomes poisoned from the green dragon*", 0, ChatType.Shout));
                                        Session.CharacterInfo.isUsingGreen = false;
                                    }

                                       Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));

                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }



                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion


                    #region :shotgun x
                    case "shotgun":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Cooldown / Weapons Enabled
                            try
                            {
                                TimeSpan Span = DateTime.Now - Session.CharacterInfo.Cooldown;

                                if(RPStats.getStat(Session,"level") < 5)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 5 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Span.Seconds < 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down [" + Span.Seconds + "/0]", 0, ChatType.Whisper));
                                    return true;
                                }
                                else if (Session.CharacterInfo.Bullets == 0)
                                {
                                    Session.SendData(UserAlertModernComposer.Compose("Error", "You're out of bullets, head down to the weapon store and purchase some! Room ID: [13]"));
                                    return true;
                                }
                            }
                            catch (Exception e)
                            {
                               // Console.WriteLine(e.ToString());
                            }
                            #endregion
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shotgun <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Instance.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Cannot fight/Missed
                            if (Instance.RoomId == 2 || Instance.RoomId == 9)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot fight here", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 11)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Tries to shotgun " + Username + ", but misses*", 0, ChatType.Shout));
                                return true;
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(8, 19);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires a bullet goes to " + Username + " transporting them to the hospital*", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            TargetSession.CharacterInfo.Health = 100;
                                            TargetSession.CharacterInfo.Timer = 2;
                                            TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                            TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);
                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateBullets(MySqlClient, -1);
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Session.CharacterInfo.Cooldown = DateTime.Now;
                                        }
                                    }
                                    TargetSession.CharacterInfo.Heal(MySqlClient);
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shotguns " + Username + " causing " + HitPoint + " damage*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Target.Id, "[" + TargetSession.CharacterInfo.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateBullets(MySqlClient, -1);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                    
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion

                    #region :sniper x
                    case "sniper":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.sniperCd;
                            if (span.Seconds < RPMisc.getCdFor("sniper"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("sniper") + "]", 0, ChatType.Whisper));
                                return true;
                            }

                              if(RPStats.getStat(Session,"level") < 5)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 5 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(15, 30);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their Pump Shotgun " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there Pump Shotgun causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(10, 25);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Shotgun == 20)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a Sniper Rifle!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires at " + Username + " using their Sniper Rifle causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets shot dead! [+10 points]*", 0, ChatType.Shout));
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);
                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.sniperCd = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires at " + Username + " using their Sniper Rifle causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateEnergy(MySqlClient, -2);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.sniperCd = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion
                    #region :pistol x
                    case "pistol":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                              if(RPStats.getStat(Session,"level") < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                              TimeSpan span = DateTime.Now - Session.CharacterInfo.pistolCd;
                           
                              if (span.Seconds < RPMisc.getCdFor("pistol"))
                              {
                                  Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("pistol") + "]", 0, ChatType.Whisper));
                                  return true;
                              }

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 15);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Pellet == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a G24 Pistol!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets shot dead! [+10 points]*", 0, ChatType.Shout));
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);

                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.pistolCd = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.pistolCd = DateTime.Now;

                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion
                    #region :bat x
                    case "bat":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room !", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 15);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to hit with their KKA bat but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Knife == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a bat!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOHIT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their bat at " + Username + "'s head " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets beat to death! [+10 points]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);

                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their bat at " + Username + "'s head " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion
                    #region :mp5 x
                    case "mp5":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this speical room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.mp5Cd;
                            if (span.Seconds < RPMisc.getCdFor("mp5"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("mp5") + "]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                              if(RPStats.getStat(Session,"level") < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;

                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 30);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Glock == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a MP5!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their MP5 causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets shot dead! [+10 points]*", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        TargetSession.CharacterInfo.Health = 100;
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);

                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.mp5Cd = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their MP5 causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.mp5Cd = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion
                    #region :stab x
                    case "stab":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :stab <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 5)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 15);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Stab user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to stab but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stab, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stab prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Knife == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a Knife!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSTAB"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stab in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stabs " + Username + " with their Knife causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets stabbed dead! [+10 points]*", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    TargetSession.CharacterInfo.Health = 100;
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                    TargetSession.CharacterInfo.Timer = 5;
                                    TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                    TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                    Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                    bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                    if (!wired_done)
                                    {
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                        int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                        decimal rewards = decimal.Parse(reward.ToString());
                                        rewards = Math.Round(rewards, 0);

                                        reward = int.Parse(rewards.ToString());
                                        Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                        Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stabs " + Username + " with their Knife causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion


                    #region :aim x

                    case "aim":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (RPStats.getStat(Session, "level") < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :aim  <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            

                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion

                            if (Session.CharacterInfo.Uzi <= 0 && Session.CharacterInfo.Glock <= 0 && Session.CharacterInfo.Pellet <= 0 && Session.CharacterInfo.Shotgun <= 0)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You do not have a gun to aim with?", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.aimingAt == TargetSession.CharacterInfo.Id)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already aiming at this person!", 0, ChatType.Shout));
                                return true;
                            }

                            Session.CharacterInfo.aimingAt = TargetSession.CharacterInfo.Id;
                            TargetSession.CharacterInfo.beingAimed = true;
                            TargetSession.CharacterInfo.aimeee = Session.CharacterInfo.Id;
                            TargetSession.CharacterInfo.StartTimer("aim", TargetSession);
                            
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have aimed your gun at " + TargetSession.CharacterInfo.Username, 0, ChatType.Whisper));

                            return true;
                        }

                    #endregion

                    #region :minigun x
                    case "minigun":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :minigun  <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                              if(RPStats.getStat(Session,"level") < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                              TimeSpan span = DateTime.Now - Session.CharacterInfo.minigunCd;
                              if (span.Seconds < RPMisc.getCdFor("minigun"))
                              {
                                  Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("minigun") + "]", 0, ChatType.Whisper));
                                  return true;
                              }

                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion

                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                            }
                            #endregion

                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(10, 30);
                               
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Uzi == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need a UZI.", 0, ChatType.Whisper));
                                    return true;
                                }
                                else
                                {

                                    if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                        return true;
                                    }

                                    Target.Health = (Target.Health - HitPoint);


                                    
                                    if (TargetSession.CharacterInfo.Health < 1)
                                    {
                                        if (TargetSession.CharacterInfo.Brawl == true)
                                        {

                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                            TargetSession.CharacterInfo.Brawl = false;
                                            Target.Brawl = false;
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        }
                                        else
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their Mini Gun, causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets injured and dies! [+10 points]*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                            Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                            TargetSession.CharacterInfo.Health = 100;
                                            TargetSession.CharacterInfo.Timer = 5;
                                            TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                            TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                            Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                            bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                            if (!wired_done)
                                            {
                                                RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                                TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                                int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                                decimal rewards = decimal.Parse(reward.ToString());
                                                rewards = Math.Round(rewards, 0);

                                                reward = int.Parse(rewards.ToString());
                                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                                Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                            }
                                        }
                                        Session.CharacterInfo.minigunCd = DateTime.Now;
                                    }
                                    else
                                    {
                                        int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                        decimal rewards = decimal.Parse(reward.ToString());
                                        rewards = Math.Round(rewards, 0);
                                        reward = int.Parse(rewards.ToString());
                                        string more = "";
                                        if (reward > 1)
                                        {
                                            more = "s";
                                        }
                                        RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their Mini Gun, causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                        Session.CharacterInfo.UpdateEnergy(MySqlClient, -2);

                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        Session.CharacterInfo.minigunCd = DateTime.Now;
                                        if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                    }
                                }

                            #endregion
                                return true;
                            }
                        }
                    #endregion
                    #region :rob x
                    case "rob":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :rob <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOROB") || (13 == Instance.RoomId || 21 == Instance.RoomId || 61 == Instance.RoomId || 82 == Instance.RoomId || 2 == Instance.RoomId || 9 == Instance.RoomId))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant rob in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Trys to rob " + TargetSession.CharacterInfo.Username + " but is too far away!", 0, ChatType.Shout));
                                return true;
                            }
                            #endregion

                            #region Rob User
                            Random _s = new Random();
                            int amount = RandomGenerator.GetNext(3, 16);
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 10);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to rob someone but feels too dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }
                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rob your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rob, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rob prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Wanted == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't rob if your wanted :(.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Phone == 0 || TargetSession.CharacterInfo.CreditsBalance < 76)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Attempts to rob " + Username + " but they don't have any money", 0, ChatType.Shout));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.CreditsBalance > amount)
                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Holds up " + Username + " with a pistol*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*takes their money and phone from them*", 0, ChatType.Shout));
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for robbery!", 0, ChatType.Whisper));
                                    Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +76);
                                    TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, 76);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                }
                                else
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*This user doesn't have " + amount + ", so you couldn't take it off them!*", 0, ChatType.Whisper));
                                }

                            #endregion
                                return true;
                            }
                        }
                    #endregion
                    #region :text x <msg>
                    case "text":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :text x <msg>", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Phone == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, But you currently do not have a phone so you cannot use the :text feature, go to roomid [5] and buy one!", 0, ChatType.Whisper));
                                    return true;
                                }


                                if ((Session.CharacterInfo.Jailed == 1) || (Session.CharacterInfo.Dead == 1))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "How can you ring people when your arrested/dead?", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.ActivityPointsBalance < 10)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are out of credit - go to roomid [5] and say :buycredit!", 0, ChatType.Whisper));
                                    return true;
                                }
                                Session session13 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (instanceByRoomId != null)
                                {
                                    instanceByRoomId.GetActorByReferenceId(session13.CharacterId, RoomActorType.UserCharacter);
                                }
                                if (instanceByRoomId != null)
                                {
                                    instanceByRoomId.GetActorByReferenceId(session13.CharacterId, RoomActorType.UserCharacter);
                                }

                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot recieve a message.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;


                                {



                                    if (Session.CharacterInfo.Phone == 1)
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my iPhone and sends a message to " + Username + "*", 0, ChatType.Shout));
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, " That call just cost you 10 phone credit", 0, ChatType.Whisper));
                                    string msg = Input.Replace(Bits[0].ToLower(), "");
                                    TargetSession.SendData(UserAlertModernComposer.Compose("Text Message Recieved", msg + "\n\nFrom: " + Session.CharacterInfo.Username));
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();

                                    Session.CharacterInfo.UpdateActivityPointsBalance(MySqlClient, -10);


                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :corpinfo
                    case "corpinfo":
                        {
                            int id = Convert.ToInt32(Bits[1].Trim());
                            string display = "";

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                DataRow Row = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + id + "'");
                                if (Row != null)
                                {
                                    display += "~~General Information of " + Row["name"].ToString() + " Corp\n~~";

                                    display += "Corp name: " + Row["name"].ToString() + "\n";
                                    display += "Owner: " + Row["ownerid"] + "\n";
                                    display += "Main Room: " + Row["roomid"] + "\n";
                                    display += "Bank Balance: " + Row["bank"] + "\n";
                                    display += "Founder: " + Row["founder"] + "\n";
                                    display += "Open spots: " + Row["spots"] + "\n\n";

                                    DataTable Tbl = MySqlClient.ExecuteQueryTable("SELECT * FROM jobranks WHERE jobid = '" + id + "'");
                                    if (Tbl != null)
                                    {
                                        foreach (DataRow Rank in Tbl.Rows)
                                        {
                                            display += "~~(Rank) " + Rank["name"] + "~~\n";
                                            display += "Rank id: " + Rank["id"] + "\n";
                                            display += "Type: " + Rank["rank"] + "\n";
                                            display += "Pay time: " + Rank["paytime"] + "\n";
                                            display += "Pay: " + Rank["pay"] + "\n\n";
                                        }
                                    }

                                    DataTable Tbl2 = MySqlClient.ExecuteQueryTable("SELECT * FROM users WHERE groupid = '" + id + "' ORDER BY `jobrank` DESC");
                                    display += "~~Employees~~\n";
                                    foreach (DataRow User in Tbl2.Rows)
                                    {
                                        display += "[" + User["id"] + "] [Rank: " + RPMisc.getCorpRankInfo("name", Convert.ToInt32(User["groupid"]), Convert.ToInt32(User["jobrank"])) + "]" + User["username"] + "\n";
                                    }
                                }
                            }
                            Session.SendData(MessageOfTheDayComposer.Compose(display));
                            return true;
                        }
                    #endregion
                    #region :roomid
                    case "roomid":
                        {

                            int corpid = RPStats.getUStat(Session, "groupid");
                            int rankid = RPStats.getUStat(Session, "jobrank");

                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're in ROOMID: [" + Instance.RoomId + "]!", 0, ChatType.Whisper));
                           return true;
                        }
                    #endregion
                    #region :stats
                    case "stats":
                        {
                            string stats = "";

                            stats += "\n-------------------\n";
                            stats += " Character\n";

                            stats += "Id: " + Session.CharacterInfo.Id + "\n";
                            stats += "Health: " + Session.CharacterInfo.Health + "/100\n";
                            stats += "Energy: " + Session.CharacterInfo.Energy + "/100\n";
                            stats += "XP: " + RPStats.getStat(Session,"cur_xp") + "/" + RPStats.getStat(Session,"need_xp") + "\n";
                            stats += "Level/Strength: " + RPStats.getStat(Session, "level") + "\n";

                            stats += "-------------------\n";
                            stats += " Misc\n";

                            stats += "Game Points: " + RPStats.getUStat(Session, "game_pts") + "\n";
                            stats += "Money: $" + Session.CharacterInfo.CreditsBalance + "\n";
                            stats += "Bank Balanace: $" + Session.CharacterInfo.Bank + "\n";
                            
                            stats += "-------------------\n";
                            stats += " Inventory\n";

                            stats += "Weed: " + Session.CharacterInfo.Weed + "\n";
                            stats += "Bullets: " +  Session.CharacterInfo.Bullets + "\n";
                            stats += "MP5: " + Session.CharacterInfo.Glock + "\n";
                            stats += "Knife: " + Session.CharacterInfo.Knife + "\n";
                            stats += "Shotgun: " + Session.CharacterInfo.Shotgun + "\n";
                            stats += "Pistol: " + Session.CharacterInfo.Pellet + "\n";

                            stats += "-------------------\n";
                            stats += " Timers\n";

                            stats += "Wanted: " + Session.CharacterInfo.Wanted + "\n";
                            stats += "Learning: " + Session.CharacterInfo.Learning + "\n";
                            stats += "Dead: " + Session.CharacterInfo.Dead + "\n";
                            stats += "Jailed: " + Session.CharacterInfo.Jailed + "\n";


                            stats += "-------------------\n";
                            stats += " Career\n";

                            int corpid = RPStats.getUStat(Session, "groupid");
                            int rankid = RPStats.getUStat(Session, "jobrank");

                           /* if (corpid != 1)
                            {
                                stats += "Works for " + RPMisc.getCorpInfo(corpid, "name").ToString();
                                stats += "as a " + RPMisc.getCorpRankInfo(corpid, rankid, "name").ToString() + "\n";
                            }
*/

                            stats += "Jobid: " + Session.CharacterInfo.GroupID + "\n";
                            stats += "Jobrankid: " + RPStats.getUStat(Session,"jobrank") + "\n";




                            Session.SendData(MessageOfTheDayComposer.Compose("Stats for " + Session.CharacterInfo.Username  + stats));
                            return true;
                        }
                    #endregion
                    #region :buycigs
                    case "buycigs":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }




                            if (13 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Buys 1 pack of Marlboro ultra's with 6 smokes [-10c]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateTokens(MySqlClient, +6);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 13 to buy Cigarettes", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :smoke
                    case "smoke":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            if (Session.CharacterInfo.Tokens > 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my pack of Marlboro ultra's*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs 1 cigarette from the pack and smokes it!* [-10e]", 0, ChatType.Shout));

                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateEnergy(MySqlClient, -10);
                                Session.CharacterInfo.UpdateTokens(MySqlClient, -1);


                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke cigarettes in jail.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke cigarettes while in the hospital.", 0, ChatType.Whisper));
                                return true;
                            }



                            else


                                if (Session.CharacterInfo.Tokens > 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don`t have enough cigarettes to smoke go to room 13 and buy some more!", 0, ChatType.Whisper));
                                    return true;
                                }

                            return true;
                        }

                    #endregion
                    #region :laws
                    case "laws":
                        Session.SendData(MessageOfTheDayComposer.Compose("State Laws\n\n Laws Will be updated as the game goes on. Keep checking back"));
                        return true;
                    #endregion
                    #region :wl
                    case "wl":
                        using (SqlDatabaseClient client25 = SqlDatabaseManager.GetClient())
                        {
                            StringBuilder builder3 = new StringBuilder();
                            builder3.AppendLine("------------------------\nWanted Criminals:\n------------------------");
                            foreach (DataRow row8 in client25.ExecuteQueryTable("SELECT * FROM users WHERE wanted = 1").Rows)
                            {
                                builder3.AppendLine(((string)row8["username"]));
                            }
                            Session.SendData(MessageOfTheDayComposer.Compose(builder3.ToString()));
                        }
                        return true;
                    #endregion
                    #region :hotrooms
                    case "hotrooms":
                        using (SqlDatabaseClient client25 = SqlDatabaseManager.GetClient())
                        {
                            string builder = "";
                            builder += "------------------------\nCurrent Active Rooms:\n------------------------";
                            foreach (DataRow row8 in client25.ExecuteQueryTable("SELECT id,name,current_users FROM rooms WHERE current_users > '0' ORDER BY current_users DESC LIMIT 25").Rows)
                            {
                                builder += "[" + row8["id"] + "] " + row8["name"] + " - Users in room: " + row8["current_users"] + "\n";
                            }
                            Session.SendData(MessageOfTheDayComposer.Compose(builder));
                        }
                        return true;
                    #endregion
                    #region :giveitem x
                    case "giveitem":
                        session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                        if (instanceByRoomId != null)
                        {
                            instanceByRoomId.GetActorByReferenceId(session12.CharacterId, RoomActorType.UserCharacter);
                        }
                        RoomActor actor7 = (instanceByRoomId == null) ? null : instanceByRoomId.GetActorByReferenceId(session12.CharacterId, RoomActorType.UserCharacter);
                        string str25 = session12.CharacterInfo.Username;
                        if (((session12 == null) || !session12.InRoom) || (Session.AbsoluteRoomId != session12.AbsoluteRoomId))
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + str25 + " in this room.", 0, ChatType.Whisper));
                            return true;
                        }



                        if (session12.CharacterId == Session.CharacterId)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant give yourself a drink?", 0, ChatType.Whisper));
                            return true;
                        }
                        actor7.CarryItem(Actor.CarryItemId, true);
                        Actor.CarryItem(0, true);
                        instanceByRoomId.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hands the item to " + str25 + "*", 0, ChatType.Shout), false);
                        return true;
                    #endregion
                    #region :setatm <amount>
                    case "setatm":
                        {

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :setatm <amount>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            int chosenamount = Int32.Parse(UserInputFilter.FilterString(Bits[1].Trim()));
                            if(chosenamount <= 0)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not allowed to set negative amounts..", 0, ChatType.Whisper));
                                return true;
                            }

                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your ATM withdrawel amount has been set to " + chosenamount + "c.", 0, ChatType.Whisper));
                            Session.CharacterInfo.UpdateATMamount(chosenamount);
                            return true;
                        }

                    #endregion
                    #region :hug x
                    case "hug":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hug people while serving time.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hug people if your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hugs " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :swear x
                    case "swear":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot let your anger out on your inmates!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot let your anger out if your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Raises my middle finger and points it in " + TargetSession.CharacterInfo.Username + "'s direction*", 0, ChatType.Shout));
                            TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "" + Session.CharacterInfo.Username + " just swore at you!", 0, ChatType.Whisper));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :hi5 x
                    case "hi5":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hi5 while in jail, this is a punishment.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hi5 while your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*High 5's " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :spit x
                    case "spit":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot spit!, your in here for a reason.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot spit!, you were killed for a reason!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Spit's on " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :poke x
                    case "poke":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot poke people in jail.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot poke people while your dead!", 0, ChatType.Whisper));
                                return true;

                            }
                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Poke's " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :slap x
                    case "slap":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot slap your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot slap while you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Slaps " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :kiss x
                    case "kiss":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot kiss your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot kiss while your dead.", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Kisses " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));
                            HandleKiss(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :snog x
                    case "snog":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot snog your inmates!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot snog if your dead!", 0, ChatType.Whisper));
                                return true;
                            }
                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Snogs " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));
                            HandleSnog(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :rape x
                    case "rape":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rape your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rape you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls down " + TargetSession.CharacterInfo.Username + "'s pants and gently starts to F**K Them*", 0, ChatType.Shout));
                            HandleRape(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :sex x
                    case "sex":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot have sex with your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSEX"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't start sex in this room.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot have sex if you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls down my pants, takes out my dick and puts it on " + TargetSession.CharacterInfo.Username + " and starts to do a blowjob*", 0, ChatType.Shout));
                            HandleRape(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :marry x
                    case "marry":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 5)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/5]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Instance.Info.Description.Contains("CHURCH") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in a church to wed!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot marry your inmates.", 0, ChatType.Whisper));
                                return true;
                            }

                           

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot marry anyone while you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPMisc.isMarried(Session))
                            {
                                int marriedto = RPStats.getStat(Session,"married_to");
                                Session Married = SessionManager.GetSessionByCharacterId(Convert.ToUInt32(marriedto));
                                if (Married != null)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already married to " + Married.CharacterInfo.Username, 0, ChatType.Whisper));
                                }
                                else
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already married! ", 0, ChatType.Whisper));
                                }
                                return true;
                            }


                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));

                            if (TargetSession2.CharacterInfo.marryReq == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user has received a marriage request already, wait til he/she accepts/denies it.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPMisc.isMarried(TargetSession2))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is already married!", 0, ChatType.Whisper));
                                return true;
                            }

                            
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                             string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Asks for " + TargetSession.CharacterInfo.Username + "'s hand in marriage*", 0, ChatType.Shout));
                            TargetSession.CharacterInfo.marryReq = true;
                            TargetSession.CharacterInfo.marryReqer = Session.CharacterInfo.Id;
                            TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, Session.CharacterInfo.Username + " has asked for your hand in marriage. Type #accept to accept or #deny to deny.", 0, ChatType.Whisper));
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :robbank
                    case "robbank":
                        {

                            if (Session.CharacterInfo.Tokens == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have robbed this bank already, come back in a while!", 0, ChatType.Whisper));
                                return true;
                            }


                            if (25 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Puts on mask and demands for cash*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Starts robbing the bank*", 0, ChatType.Shout));
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for bank robbery!", 0, ChatType.Whisper));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 4);
                                Session.CharacterInfo.UpdateTokens(MySqlClient, 1);
                                Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Please wait [10] seconds before you get your robbery reward.", 0, ChatType.Whisper));
                                System.Threading.Thread.Sleep(10000);
                                int newcoins = Session.CharacterInfo.CreditsBalance + 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +250);
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                int policeMembersOnline = 0;

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));

                                    if ((TargetSession != null || TargetSession.InRoom) && (TargetSession.CharacterInfo.GroupID == 3) && (TargetSession.CharacterInfo.GroupID == 6) && (TargetSession.CharacterInfo.Working == 1))
                                    {
                                        TargetSession.SendData(NotificationMessageComposer.Compose(Session.CharacterInfo.Username + " had robbed the bank in [25]."));
                                        policeMembersOnline++;
                                    }
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gains [$250] from the robbery*", 0, ChatType.Shout));
                            }

                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can only rob the bank in room 25!", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region #accept
                    case "accept":
                        {
                            if (Session.CharacterInfo.marryReq && Session.CharacterInfo.marryReqer != 0)
                            {
                                Session TargetSession = SessionManager.GetSessionByCharacterId(Session.CharacterInfo.marryReqer);
                                RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);

                                RPMisc.Marry(TargetSession,Session);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "Yes yes yes, baby! I want to marry you!", 0, ChatType.Shout));
                                return true;
                            }

                            if (Session.CharacterInfo.Offerpgun == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 450)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferpgun(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 450;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -450);
                                Session.CharacterInfo.UpdatePellet(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a G24 Pistol", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Offersgun == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOffersgun(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 1000;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -1000);
                                Session.CharacterInfo.UpdateShotgun(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a Sniper Rifle", 0, ChatType.Whisper));

                            }
                            if (Session.CharacterInfo.Offerglock == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferglock(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferglock(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 1500;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -1500);
                                Session.CharacterInfo.UpdateGlock(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a MP5", 0, ChatType.Whisper));

                            }
                            if (Session.CharacterInfo.Offersgun == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOffersgun(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -250);
                                Session.CharacterInfo.UpdateKnife(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a Bat", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Offerweed == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 10)
                                {
                                    Session.CharacterInfo.UpdateOfferweed(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferweed(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                                Session.CharacterInfo.UpdateWeed(MySqlClient, +5);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived 5g of Weed [-$10]", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.OfferKeycard == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferKeycard(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                                Session.CharacterInfo.UpdateKeycard(1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a Keycard [-$10]", 0, ChatType.Whisper));

                            }
                            if (Session.CharacterInfo.Offerknife == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 250)
                                {
                                    Session.CharacterInfo.UpdateOfferknife(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferknife(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -250);
                                Session.CharacterInfo.UpdateKnife(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived Knife [-$250]", 0, ChatType.Whisper));
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, but no one is offering you anything.", 0, ChatType.Whisper));
                            }


                            return true;

                        }
                    #endregion
                    #region #deny
                    case "deny":
                        {

                            if (Session.CharacterInfo.marryReq)
                            {
                                Session.CharacterInfo.marryReq = false;
                                Session.CharacterInfo.marryReqer = 0;
                            }

                            if (Session.CharacterInfo.Offerweed == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferweed(0);

                            }
                            if (Session.CharacterInfo.Offersgun == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOffersgun(0);

                            }
                            if (Session.CharacterInfo.Offerpgun == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferpgun(0);

                            }
                            if (Session.CharacterInfo.OfferKeycard == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferKeycard(0);

                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, But no one is offering you anything.", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }


                    #endregion
                    #region :smokeweed
                    case "smokeweed":
                        {

                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            if (Session.CharacterInfo.Weed > 5)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Smokes 5g of Weed [-20e]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateEnergy(MySqlClient, -20);
                                Session.CharacterInfo.UpdateWeed(MySqlClient, -5);


                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke weed in jail.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke weed in the hospital.", 0, ChatType.Whisper));
                                return true;
                            }

                            else

                                if (Session.CharacterInfo.Weed == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have enough weed to smoke go to room 15 and buy some more!", 0, ChatType.Whisper));
                                    return true;
                                }

                            return true;
                        }

                    #endregion
                    #region :startwork
                    case "startwork":

                        #region cw
                        //games
                        if (Session.CharacterInfo.inCw == true)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                            return true;
                        }
                        #endregion

                        if (Session.CharacterInfo.Energy < 5)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're don't have enough energy to work grab a snack and refresh yourself!", 0, ChatType.Whisper));
                            return true;
                        }

                        if (Session.CharacterInfo.SentHome == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant work, Your manager/supervisor has sent you home!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Working == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're already working!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant work, You're dead!", 0, ChatType.Whisper));
                            return true;
                        }

                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant work, You're jailed!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            MySqlClient.SetParameter("groupid", Session.CharacterInfo.GroupID);
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = @groupid");
                            MySqlClient.SetParameter("userid", Session.CharacterInfo.Id);
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = @userid");
                            MySqlClient.SetParameter("groupid", Session.CharacterInfo.GroupID);
                            MySqlClient.SetParameter("rankid", Row2["jobrank"]);
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = @groupid AND rankid = @rankid");
                            int room_id = (int)Row1["roomid"];
                            string jobname = (string)Row1["name"] + " " + (string)Row3["name"];
                            string jobfig = (string)Row3["figure_data_" + Session.CharacterInfo.Gender.ToString()];
                            int paytime = (int)Row3["paytime"];

                            if (room_id == Instance.RoomId || room_id == 0)
                            {
                                string figure_update = FigToUniFig(Session.CharacterInfo.Figure) + jobfig;
                                if (jobfig == "")
                                {
                                    figure_update = Session.CharacterInfo.Figure;
                                }
                                if (Session.CharacterInfo.Timer < 1 || Session.CharacterInfo.Timer > paytime)
                                {
                                    Session.CharacterInfo.Timer = paytime;
                                }
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, figure_update, Session.CharacterInfo.Gender, "[WORKING] " + jobname, Session.CharacterInfo.Score));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Starts to work*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateLearning(MySqlClient, 0);
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 1);
                                Session.CharacterInfo.StartTimer("work", Session);

                            }
                        }
                        return true;
                    #endregion
                    #region :buytaxi
                    case "buytaxi":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 5000)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Intelligence == 750)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have a free taxi.", 0, ChatType.Whisper));
                                return true;
                            }


                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Buys a free taxi [-$5000]", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateIntelligence(MySqlClient, 750);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 5000;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -50);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to buy free taxi", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :buyintel
                    case "buyintel":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 2000)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Intelligence == 50)
                                if (Session.CharacterInfo.Intelligence == 100)
                                    if (Session.CharacterInfo.Intelligence == 150)
                                        if (Session.CharacterInfo.Intelligence == 200)
                                            if (Session.CharacterInfo.Intelligence == 250)
                                                if (Session.CharacterInfo.Intelligence == 300)
                                                    if (Session.CharacterInfo.Intelligence == 350)
                                                        if (Session.CharacterInfo.Intelligence == 400)
                                                            if (Session.CharacterInfo.Intelligence == 450)
                                                                if (Session.CharacterInfo.Intelligence == 500)
                                                                    if (Session.CharacterInfo.Intelligence == 550)
                                                                        if (Session.CharacterInfo.Intelligence == 600)
                                                                            if (Session.CharacterInfo.Intelligence == 650)
                                                                                if (Session.CharacterInfo.Intelligence == 700)
                                                                                    if (Session.CharacterInfo.Intelligence == 750)
                                                                                        if (Session.CharacterInfo.Intelligence == 800)
                                                                                            if (Session.CharacterInfo.Intelligence == 1000)
                                                                                            {
                                                                                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have 50 Intelligence.", 0, ChatType.Whisper));
                                                                                                return true;
                                                                                            }


                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Opens their wallet, and buys 50 Intel [-$2000]", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateIntelligence(MySqlClient, 50);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 2000;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -2000);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to buy Intelligence", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :buycredit
                    case "buycredit":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Phone == 1)
                            {



                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Unlocks their phone and buys 100 texts for $10 [-$10 + 100 phone credit]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newpx = Session.CharacterInfo.ActivityPointsBalance + 100;
                                Session.SendData(ActivityPointsBalanceComposer.Compose(newpx, 100));
                                Session.CharacterInfo.UpdateActivityPointsBalance(MySqlClient, +100);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must have a phone to buy credit!", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :buyinsurance
                    case "buyinsurance":
                        {
                            if (Session.CharacterInfo.Intelligence < 50)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need 50 intelligence to buy car insurance!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.CreditsBalance < 250)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford to buy your insruance.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Insurance == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have car insurance!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Purchases my car insurance [-$250]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateInsurance(MySqlClient, 1);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -250);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to purchase your car insurance", 0, ChatType.Whisper));
                                return true;
                            }

                            return true;
                        }


                    #endregion
                    #region :buylicense
                    case "buylicense":
                        {
                            if (Session.CharacterInfo.Intelligence < 50)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need 50 intelligence to buy a car license!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.CreditsBalance < 30)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford to buy your license.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Licence == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have a car license!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Purchases my own car license [-$30]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateLicence(MySqlClient, 1);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 30;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -30);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to purchase your license", 0, ChatType.Whisper));
                                return true;
                            }

                            return true;
                        }


                    #endregion
                    #region :sellmp5 x
                    case "sellmp5":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellMP5 <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell MP5
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling MP5",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 1500)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a MP5 from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$1500]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferglock(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you MP5 for [$1500] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1500;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerglock == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferglock(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :sellpistol x
                    case "sellpistol":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellpistol <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell Pistol
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Pistol",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 1000)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a G24 Pistol from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$1000]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferpgun(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you a G24 Pistol for [$1000] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1500;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerpgun == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferpgun(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :buybullets
                    case "buybullets":
                        {




                            if (13 == Instance.RoomId)
                            {

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Loads there Guns with 75 more bullets [-50c]", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateBullets(MySqlClient, +75);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 50;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -50);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 13 to buy bullets", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :sellsniper x
                    case "sellsniper":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellshotgun <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell Sniper
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Sniper",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 1000)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Shotgun == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user already has a sniper rifle.", 0, ChatType.Whisper));
                                        return true;

                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a Sniper Rifle from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$1000]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOffersgun(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you a Sniper Rifle for [$1000] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1000;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerpgun == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOffersgun(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :sellkeycard x
                    case "sellkeycard":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellkeycard <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Sell Keycard
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Keycard",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 10)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell keycards to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell keycards to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Keycard == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user already has a keycard.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a Keycard from behinde the desk and offers it to " + TargetSession.CharacterInfo.Username + " for [$10]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferKeycard(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An Ibis hotel worker is offering you a keycard for [$10] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1000;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.OfferKeycard == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferKeycard(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :sellknife x
                    case "sellknife":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellknife <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell Knife
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Knife",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 250)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell knifes to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell knifes to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a Knife from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$250]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferknife(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you a Knife for [$250] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1500;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerknife == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferknife(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :stopwork
                    case "stopwork":
                        if (Session.CharacterInfo.Working != 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant stop work, You're are not working!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant stop work, You're are dead!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant stop work, You're are in jail!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseClient client22 = SqlDatabaseManager.GetClient())
                        {
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, Actor.Figure, Session.CharacterInfo.Gender, Session.CharacterInfo.Motto, Session.CharacterInfo.Score), false);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stops working*", 0, ChatType.Shout), false);
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                Session.CharacterInfo.isWorking = false;
                            }
                        }
                        return true;
                    #endregion
                    #region :deposit <amount>
                    case "deposit":
                        {
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :deposit <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[1].Trim()));

                            if (amount <= 0)
                            {
                                return false;
                            }

                            if (amount > Session.CharacterInfo.CreditsBalance)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Error - You dont have " + amount + " coins!", 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int newamount = Session.CharacterInfo.CreditsBalance - amount;
                                int newbank = Session.CharacterInfo.Bank + amount;
                                Session.CharacterInfo.UpdateBank(MySqlClient, +amount);
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -amount);
                                Session.SendData(CreditsBalanceComposer.Compose(newamount));
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Deposits " + amount + " dollars into their bank account*", 0, ChatType.Shout));
                            return true;
                        }
                    #endregion
                    #region :give x <amount>
                    case "give":
                        {


                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }




                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :give <username> <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot give coins to your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot give coins while your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (amount < 1 || amount > Session.CharacterInfo.CreditsBalance)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Error - You dont have enough coins to give away!", 0, ChatType.Whisper));
                                return true;
                            }
                            Username = TargetSession.CharacterInfo.Username;
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int user1 = 0;
                                user1 = Session.CharacterInfo.CreditsBalance - amount;
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -amount);
                                Session.SendData(CreditsBalanceComposer.Compose(user1));

                                int user2 = 0;
                                user2 = TargetSession.CharacterInfo.CreditsBalance + amount;
                                TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, amount);
                                TargetSession.SendData(CreditsBalanceComposer.Compose(user2));
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hands " + amount + " dollars to " + Username + "*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #region :balance
                    case "balance":
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Checks my bank balance on my iPhone*", 0, ChatType.Shout));
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Bank + " dollars in your bank!", 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :healdrag
                    case "healdrag":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.lastUsedSky;

                            if (!RPMisc.hasBlueDrag(Session) && Session.CharacterInfo.Username.Contains("Ying") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You do not have a sky dragon, you can purchase one from VIP store.", 0, ChatType.Whisper));
                                return true;       
                            }

                            if (span.Seconds < 500)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your sky dragon is currently cooling down!", 0, ChatType.Whisper));
                                return true;
                            }
                            Random _s = new Random();
                            int rand = _s.Next(1, 10);

                            if (rand != 5)
                            {
                                Session.CharacterInfo.Health -= 5;
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Attempts to activate their healing dragon but fails. [-5H]*", 0, ChatType.Shout));
                                Session.CharacterInfo.lastUsedSky = DateTime.Now;
                                return true;
                            }
                            else
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Successfully activates their healing dragon*", 0, ChatType.Shout));
                                Session.CharacterInfo.Timer = 5;
                                Session.CharacterInfo.isUsingSky = true;
                                Session.CharacterInfo.StartTimer("skydrag", Session);
                                Actor.ApplyEffect(8);
                            }

                            return true;
                        }
                    #endregion
                    #region :taxi <roomid>
                    case "taxi":
                        #region cw
                        //games
                        if (Session.CharacterInfo.inCw == true)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                            return true;
                        }
                        #endregion

                        if (Bits.Length < 2)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :taxi <room id>", 0, ChatType.Whisper));
                            return true;
                        }
                        if (instanceByRoomId.Info.Description.Contains("NOTAXI"))
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "This is a no taxi zone, please go somewhere where you can taxi!", 0, ChatType.Whisper));
                            return true;
                        }
                        uint roomid = uint.Parse(UserInputFilter.FilterString(Bits[1].Trim().ToString()));

                        if (roomid == Session.CurrentRoomId)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're already in that room!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot taxi whilst jailed .", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot taxi whilst dead.", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Gathering == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot taxi whilst gathering/playing with an item.", 0, ChatType.Whisper));
                            return true;
                        }
                        bool loaded = false;
                        if (!RoomManager.InstanceIsLoadedForRoom(roomid))
                        {
                            loaded = RoomManager.TryLoadRoomInstance(roomid);
                        }
                        else
                        {
                            loaded = true;
                        }
                        if (loaded)
                        {
                            RoomInstance GoingTo = RoomManager.GetInstanceByRoomId(roomid);

                            if (GoingTo.Info.Description.Contains("NOTALLOWTAXI"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't taxi here, sorry!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (GoingTo.Info.Description.Contains("VIPONLY"))
                            {
                                int vipactive = RPStats.getStat(Session,"vip_active");
                                if (vipactive == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "The requested place is VIP only!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            
                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 3)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Squad car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                Actor.ApplyEffect(19);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 7)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in JEEP MB and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 6)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Government Jet with their Special Forces and flies to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 4)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Urgent Care Ambulance and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Username == "Logan" || Session.CharacterInfo.Username == "Dr.Avery")
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gets in their Government Car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Username == "Jonty")
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gets in their Government Car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Username == "Ying-Pie")
                            {
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 6)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Presidential State Car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Intelligence >= 750)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops on their Golden stripped Bugatti and hovers to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }
                            else
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls a taxi to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid);
                                return true;
                            }
                        }
                        else
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Couldn't find room, ID: " + roomid, 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :quitjob
                    case "quitjob":
                        if (Session.CharacterInfo.GroupID == 2)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have no job, Therefore you cannot quit your job.", 0, ChatType.Whisper));
                            return true;
                        }
                        else
                        {
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                MySqlClient.SetParameter("userid", Session.CharacterId);
                                MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = '1' WHERE id = @userid LIMIT 1");
                                MySqlClient.SetParameter("userid", Session.CharacterId);
                                MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = '2' WHERE id = @userid LIMIT 1");
                                Session.CharacterInfo.UpdateGroupID(MySqlClient, 2);
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, Session.CharacterInfo.Figure, Session.CharacterInfo.Gender, Session.CharacterInfo.Motto, Session.CharacterInfo.Score));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Quits their job*", 0, ChatType.Shout));
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You no longer have a job!", 0, ChatType.Whisper));
                            }
                            return true;
                        }
                    #endregion
                    #region :dispose
                    case "dispose":
                        {
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOHIT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant hit in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion



                            else
                            {


                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Takes my items and throws them on the ground causing them to break*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Reloading client in [10] seconds..*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateBullets(MySqlClient, 0);
                                Session.CharacterInfo.UpdateShotgun(MySqlClient, 20);
                                Session.CharacterInfo.UpdatePellet(MySqlClient, 20);
                                Session.CharacterInfo.UpdateKnife(MySqlClient, 20);
                            }
                            {

                            }
                            using (SqlDatabaseClient client32 = SqlDatabaseManager.GetClient())
                            {
                                if (!Session.InRoom)
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    Session.Stop(client32);
                                }
                                else
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    instanceByRoomId.RemoveCharacterFromRoom(Session.CharacterId);
                                    Session.Stop(client32);
                                }
                            }
                            return true;
                        }


                    #endregion
                    #region :reload
                    case "reload":
                        {
                            int time = RandomGenerator.GetNext(6, 20);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Logged out.. Reloading client [10] seconds*", 0, ChatType.Shout));

                            using (SqlDatabaseClient client32 = SqlDatabaseManager.GetClient())
                            {
                                if (!Session.InRoom)
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    Session.Stop(client32);
                                }
                                else
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    instanceByRoomId.RemoveCharacterFromRoom(Session.CharacterId);
                                    Session.Stop(client32);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :startlearn
                    case "startlearn":

                        if (Session.CharacterInfo.Learning == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're already learning!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant learn, You're dead!", 0, ChatType.Whisper));
                            return true;
                        }

                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant learn, You're jailed!", 0, ChatType.Whisper));
                            return true;
                        }

                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {


                            if (61 == Instance.RoomId)
                            {

                                string figure_update = FigToUniFig(Session.CharacterInfo.Figure) + "sh-290-62.ch-3077-83-91.lg-3058-110";
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, figure_update, Session.CharacterInfo.Gender, "[LEARNING] Library ", Session.CharacterInfo.Score));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Starts to learn*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                Session.CharacterInfo.Timer = 10;
                                Session.CharacterInfo.UpdateLearning(MySqlClient, 1);
                                Session.CharacterInfo.StartTimer("learning", Session);
                            }
                        }
                        return true;
                    #endregion
                    #region :stoplearn
                    case "stoplearn":
                        if (Session.CharacterInfo.Learning != 1)
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You cant stop learning, You're are not learning!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You cant stop learning, You're are dead!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You cant stop learning, You're are in jail!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, Actor.Figure, Session.CharacterInfo.Gender, Session.CharacterInfo.Motto, Session.CharacterInfo.Score));
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stops learning*", 0, ChatType.Shout));
                            Session.CharacterInfo.UpdateLearning(MySqlClient, 0);
                            Session.CharacterInfo.isLearning = false;
                        }
                        return true;
                    #endregion
                    #endregion

                    #region Gang Commands (7)
                    #region :gform <name>
                    case "gform":
                    case "gangform":
                    case "gcreate":
                        {
                             string Gangname = UserInputFilter.FilterString(Bits[1].Trim());

                             Session.SendData(RoomChatComposer.Compose(Actor.Id, "Running gang checks...", 0, ChatType.Whisper));
                                 
                                
                             if (Bits.Length < 2)
                             {
                                 Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :gangform <gangname>", 0, ChatType.Whisper));
                                 return true;
                             }

                             if (Gangs.isInGang(Session))
                             {
                                 Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already in a gang!", 0, ChatType.Whisper));
                                 return true;
                             }

                            if(Gangs.gangExists(Gangname))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "The '" + Gangname + "' gang already exists!", 0, ChatType.Whisper));
                                return true;
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Creates the gang '" + Gangname + "'*", 0, ChatType.Shout));
                           Gangs.createGang(Session,Gangname);
                            int gangid = Gangs.getGangidbyName(Gangname);
                            
   
                            return true;
                        }
                    #endregion
                    #region :ghelp
                    case "ganghelp":
                    case "ghelp":
                        {
                            Session.SendData(MessageOfTheDayComposer.Compose("Commands List\n------------------------\n:ghelp - Open this dialog\n:ginvite x - Invite a user into your gang.\n:gform <gangname> - Create a gang\n:gaccept - Accept invite to join gang\n:gdeny - Deny invite to join gang\n:gleave - Leave a gang\n:gbackup <msg> - Send a message to all members of your gang"));
                            return true;
                        }
                    #endregion
                    #region :ginvite x
                    case "ginvite":
                    case "ganginvite":
                        {
                           
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :ganginvite <username>", 0, ChatType.Whisper));
                                return true;
                            }

                            if(!Gangs.isInGang(Session))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not in a gang!", 0, ChatType.Whisper));
                                return true;
                            }
                            int mGid = Gangs.getUsersGInf("gangid",Session);
                            int mGrid = Gangs.getUsersGInf("gangrank",Session);

                            if(!Gangs.gRankHasPwr(mGid,mGrid,"pwr_invite"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your gang rank is forbidden from recruiting!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                return true;
                            }

                            if(Gangs.isInGang(TargetSession))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is already in a gang.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Gangs.getUsersGInf("gangid", TargetSession) == Gangs.getUsersGInf("gangid", Session))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is in your gang?", 0, ChatType.Whisper));
                                return true;
                            }
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Invites " + Username + "' to their gang '" + Gangs.getUsersgangName(Session) + "'*" , 0, ChatType.Shout));
                            TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, Session.CharacterInfo.Username + " has invited you to their gang. Type :gaccept to accept or :gdeny to deny.", 0, ChatType.Whisper));
                            TargetSession.CharacterInfo.Ginvite = Gangs.getUsersGInf("gangid", Session);
                            
                         return true;
                        }

#endregion
                    #region :gaccept
                    case "gaccept":
                        {
                            if(Session.CharacterInfo.Ginvite < 1 || Session.CharacterInfo.Ginvite == 0)
                            {

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have no gang invites to accept!", 0, ChatType.Whisper));
                                return true;
                            }

                            string gangname = Gangs.getGangnamebyId(Session.CharacterInfo.Ginvite);
                            Gangs.setUsersGInf(Session, "gangid", Session.CharacterInfo.Ginvite);
                            Gangs.setUsersGInf(Session, "gangrank", 2);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts request to join the gang '" + gangname + "'*", 0, ChatType.Shout));
                            Session.CharacterInfo.Ginvite = 0;
                            return true;
                        }
                    #endregion
                    #region :gdeny
                    case "gdeny":
                        {
                            if (Session.CharacterInfo.Ginvite < 1 || Session.CharacterInfo.Ginvite == 0)
                            {

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have no gang invites to accept!", 0, ChatType.Whisper));
                                return true;
                            }

                            string gangname = Gangs.getGangnamebyId(Session.CharacterInfo.Ginvite);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Denies request to join the gang '" + gangname + "'*", 0, ChatType.Shout));
                            Session.CharacterInfo.Ginvite = 0;

                            return true;
                        }
                    #endregion
                    #region :gbackup <msg>
                    case "gbackup":
                    case "galert":
                        {
                            if(!Gangs.isInGang(Session))
                            {
                                return true;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :gangbackup/:galert <msg>", 0, ChatType.Whisper));
                                return true;
                            }

                            string gMsg = Input.Replace(Bits[0].ToLower(), "");
                            int gangid = Gangs.getUsersGInf("gangid", Session);
                            int gangrank = Gangs.getUsersGInf("gangrank",Session);


                            if(!Gangs.gRankHasPwr(gangid,gangrank,"pwr_alert"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your gang rank is forbidden from alerting!", 0, ChatType.Whisper));
                                return true;
                            }

                            Gangs.sentTogang(Session,gMsg);


                            return true;

                        }
                    #endregion
                    #region :gleave
                    case "gleave":
                        {
                            if (!Gangs.isInGang(Session))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not in a gang!", 0, ChatType.Whisper));
                                return true;
                            }

                            int gangid = Gangs.getUsersGInf("gangid", Session);

                            if ((int)Gangs.getGangInf(gangid, "owner") == Convert.ToInt32(Session.CharacterInfo.Id))
                            {

                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session GangSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    if (Gangs.getUsersGInf("gangid", GangSession) == gangid)
                                    {

                                        RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(GangSession.CharacterId));
                                        GangSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "Since the Owner (" + Session.CharacterInfo.Username + ") has left the gang it has been deleted!", 0, ChatType.Whisper));
                                        Gangs.setUsersGInf(GangSession, "gangid", 0);
                                        Gangs.setUsersGInf(GangSession, "gangrank", 0);
                                        Gangs.deleteGang(gangid);
                                    }
                                }
                                return true;
                            }
                            else
                            {
                                Gangs.sentTogang(Session, "*Quits the Gang*");
                                Gangs.setUsersGInf(Session, "gangid", 0);
                                Gangs.setUsersGInf(Session, "gangrank", 0);
                                return true;
                            }

                            return true;
                        }
                    #endregion
                   
                    #endregion

                    #region Job Commands (18)
                    #region Hospital Commands (2)
                    #region :heal x
                    case "heal":
                        {
                            if (Session.CharacterInfo.GroupID == 4 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :heal <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Health == 100)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user dosen't need a heal.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health > 80)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Heal(MySqlClient);
                                        ModerationLogs.LogModerationAction(MySqlClient, Session, "Healed user from server (chat command)",
                                           "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                    }

                                    TargetSession.CharacterInfo.poisoned = false;
                                    RPStats.updateStat(Session, "career_cur_xp", +5);
                                    RPStats.handleCXP(Session);

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Treats " + Username + " for major wounds [+5CP]*", 0, ChatType.Shout));
                                  
                                }
                                if (TargetSession.CharacterInfo.Health < 80)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Heal(MySqlClient);
                                        ModerationLogs.LogModerationAction(MySqlClient, Session, "Healed user from server (chat command)",
                                           "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Treats " + Username + " for major wounds [+5CP]*", 0, ChatType.Shout));
                                    RPStats.updateStat(Session, "career_cur_xp", +5);
                                    RPStats.handleCXP(Session);
                                    TargetSession.CharacterInfo.poisoned = false;
                                }

                                return true;
                            }
                            return true;
                        }
                    #endregion // HOSPITAL ONLY
                    #region :vac x
                    case "vac":
                        {
                            if (Session.CharacterInfo.GroupID == 4 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :vac <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                   
                                    TargetSession.CharacterInfo.Heal(MySqlClient);
                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Vacc'd user from server (chat command)",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Inserts a massive needle into " + Username + "'s buttock*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Waits for the vaccine to drain into " + Username + "'s bloodstream*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out the massive the needle out of " + Username + "'s buttocks and is now immune from the flu*", 0, ChatType.Shout));
                                TargetSession.CharacterInfo.poisoned = false;
                                TargetSession.CharacterInfo.Health = 100;
                            }
                            return true;
                        }
                    #endregion // HOSPITAL ONLY
                    #endregion

                    #region Police Commands (10)
                    #region :bail x
                    case "bail":
                        {

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :bail <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (instanceByRoomId.Info.Description.Contains("NOBAIL"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't bail in this room.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                return true;
                            }
                            Username = TargetSession.CharacterInfo.Username;

                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            if (TargetSession.CharacterInfo.Jailed == 1)
                            {
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pays the bail for " + Username + " [-$320]*", 0, ChatType.Shout));
                            }
                            if (TargetSession.CharacterInfo.Dead == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*This user isn't jailed*", 0, ChatType.Shout));

                            }
                            Username = Session.CharacterInfo.Username;

                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*You cannot bail yourself*", 0, ChatType.Whisper));
                            }
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            {
                                int newcoins = Session.CharacterInfo.CreditsBalance - 320;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -320);
                            }
                        }
                        return true;
                    #endregion
                    #region :checkbail x
                    case "checkbail":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :checkbail <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOBAIL"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant bail in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion

                            #region Rob User
                            Random _s = new Random();
                            int amount = RandomGenerator.GetNext(3, 16);
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 10);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot check bails, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Wanted == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't check someones bail whilst wanted", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Jailed == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*This user isn't jailed*", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Checks the bail for " + Username + "*", 0, ChatType.Shout));
                                    Session.SendData(NotificationMessageComposer.Compose(TargetSession.CharacterInfo.Username + "'s bail is [$120]"));

                                }

                            #endregion
                                return true;
                            }
                        }
                    #endregion
                    #region :arrest x <time> <crime>
                    case "arrest":
                        {
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :arrest <username> <time /seconds>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int time = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                Username = TargetSession.CharacterInfo.Username;

                                if (!TargetActor.Stunned)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have to stun someone before arresting them!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (time < 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have to arrest someone for 1 or more minutes!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (time > 25)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot arrest someone for more than 25 minutes", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Wanted == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*" + TargetSession.CharacterInfo.Username + " isn't wanted, so you cannot arrest them*", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to hand cuff " + Username + ", but misses.*", 0, ChatType.Shout));
                                    return true;
                                }
                                string figure_update = FigToUniFig(TargetSession.CharacterInfo.Figure) + "ch-220-94.lg-280-94.sh-290-62";
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, figure_update, TargetSession.CharacterInfo.Gender, "[PRISONER] " + TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    if (TargetSession.CharacterInfo.Wanted == 1)
                                    {
                                        TargetSession.CharacterInfo.UpdateWanted(MySqlClient, 0);
                                    }
                                    if (TargetSession.CharacterInfo.Tokens == 1)
                                    {
                                        TargetSession.CharacterInfo.UpdateTokens(MySqlClient, -1);
                                    }
                                    TargetSession.CharacterInfo.UpdateWeed(MySqlClient, 0);
                                    TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 9);
                                    TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 1);
                                    TargetSession.CharacterInfo.StartTimer("jail", TargetSession);

                                    TargetSession.CharacterInfo.Timer = time;
                                    TargetSession.CharacterInfo.Unmute(MySqlClient);

                                }

                                if (Session.CurrentRoomId.Equals(9))
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        DataRow JailBed = MySqlClient.ExecuteQueryRow("SELECT * FROM items WHERE definition_id = '43' AND room_id = '9' ORDER BY rand() LIMIT 1");
                                        Item Item = Instance.GetItem((uint)JailBed["id"]);
                                        TargetActor.MoveToPos(new Vector2(Item.RoomPosition.X, Item.RoomPosition.Y), true);
                                    }
                                }
                                else
                                {
                                    RoomHandler.PrepareRoom(TargetSession, 9, null, true);
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Removes cuffs from belt and wraps them to " + Username + "'s Wrists and arrests " + Username + " for " + TargetSession.CharacterInfo.Timer + " minutes [+15CP]*", 0, ChatType.Shout));
                                
                                RPStats.updateStat(Session, "career_cur_xp", +15);
                                RPStats.handleCXP(Session);

                                TargetSession.SendData(NotificationMessageComposer.Compose("You've been arrested you for " + TargetSession.CharacterInfo.Timer + "minutes!"));
                            }
                        }
                        return true;
                    #endregion
                    #region :untaze x
                    case "unstun":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :unstun <username>", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            if (TargetActor.Stunned)
                            {
                                TargetActor.Stunned = false;
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Unstuns " + Username + "*", 0, ChatType.Shout));

                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.Unmute(MySqlClient);
                                }
                                TargetActor.ApplyEffect(0);
                            }
                            else
                            {

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;



                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :release x
                    case "release":
                        {
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.Username.Contains("Ying") || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :release <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));


                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;

                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isJailed = false;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from jail*", 0, ChatType.Shout));
                                }
                                if (TargetSession.CharacterInfo.Dead == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isDead = false;
                                        TargetSession.CharacterInfo.Health = 100;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from hospital*", 0, ChatType.Shout));
                                }
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            }
                        }
                        return true;
                    #endregion
                    #region :track x
                    case "track":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {



                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :track <username>", 0, ChatType.Whisper));
                                    return true;
                                }



                                if (TargetSession == null)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline or cannot be located.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;


                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls dispatch for a location on " + Username + "*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Recieves the infomation from dispatch*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(0);
                                }
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "" + Username + " is currently in RoomID : " + TargetSession.CurrentRoomId + "", 0, ChatType.Whisper));

                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :stun x
                    case "stun":
                    case "taze":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (instanceByRoomId.Info.Description.Contains("TURF"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't stun in turfs!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :taze <username>", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to stun " + Username + ", but misses!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (session12.CharacterId == Session.CharacterId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stun yourself?", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetActor.Stunned)
                                {
                                    TargetActor.Stunned = false;
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Unstuns " + Username + "*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(0);
                                }
                                else
                                {
                                    TargetActor.Stunned = true;
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Mute(MySqlClient, 15);
                                        TargetSession.SendData(RoomMutedComposer.Compose(15));
                                    }

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs my stun gun from my utility belt and fires it at " + Username + "*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(53);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :warn x <msg>
                    case "warn":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :warn x <msg>", 0, ChatType.Whisper));
                                    return true;
                                }




                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be warn'd.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;


                                {


                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gives " + Username + " a warning!*", 0, ChatType.Shout));
                                    string msg = Input.Replace(Bits[0].ToLower(), "");
                                    TargetSession.SendData(UserAlertModernComposer.Compose("Warning", msg));

                                    TargetActor.ApplyEffect(0);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :aw >username<
                    case "aw":
                        {

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                                RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                if (Actor.Name == Username2)
                                {
                                    return true;
                                }

                                string target = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                                RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "" + TargetSession.CharacterInfo.Username + " has been placed on the wanted list!", 0, ChatType.Whisper));
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                }
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :rw x
                    case "rw":
                        {

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {


                                string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                                RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                if (Actor.Name == Username2)
                                {
                                    return true;
                                }

                                string target = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                                RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "" + TargetSession.CharacterInfo.Username + " has been removed from the wanted list!", 0, ChatType.Whisper));
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.UpdateWanted(MySqlClient, 0);
                                }
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :search x
                    case "search":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {



                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :su <username>", 0, ChatType.Whisper));
                                    return true;
                                }



                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to search " + Username + ", but fails to grab him!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;
                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(0);
                                }
                                Session.SendData(MessageOfTheDayComposer.Compose("Username: " + Username + " \n\n Shotgun: " + TargetSession.CharacterInfo.Shotgun + "\n\n G24 Pistol: " + TargetSession.CharacterInfo.Pellet + "\n\n Wanted: " + TargetSession.CharacterInfo.Wanted + "\n\n Weed: " + TargetSession.CharacterInfo.Weed + "grams \n\n Knife: " + TargetSession.CharacterInfo.Knife + " "));
                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :backup
                    case "backup":
                        {

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "[POLICE RADIO] Calling for back-up!", 0, ChatType.Shout));
                                SessionManager.BroadcastPolicePacket(UserAlertModernComposer.Compose("Police Radio", "Back-up call from officer: " + Session.CharacterInfo.Username + ", in duty room no: " + Instance.RoomId + ". Your immediate action is required!"));

                            }
                        }
                        return true;
                    #endregion
                    #region :spray x
                    case "spray":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :spray <username>", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to spray " + Username + ", but misses!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (session12.CharacterId == Session.CharacterId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot spray yourself?", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (instanceByRoomId.Info.Description.Contains("TURF"))
                                    if (instanceByRoomId.Info.Description.Contains("NOSPRAY"))

                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This is a NOSPRAY room.", 0, ChatType.Whisper))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't spray in turfs.", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetActor.Stunned)
                                {
                                    TargetActor.Stunned = false;
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs my watter bottle and pour's it into " + Username + "'s eyes causing the pepper spray to clear out*", 0, ChatType.Shout));

                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Unmute(MySqlClient);
                                    }
                                    TargetActor.ApplyEffect(0);
                                }
                                else
                                {
                                    TargetActor.Stunned = true;
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Mute(MySqlClient, 5);

                                    }

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs my pepper spray from my belt, spraying it into " + Username + "'s eyes causing them to stop*", 0, ChatType.Shout));

                                    TargetActor.ApplyEffect(0);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region confiscate x
                    case "confiscate":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :confiscate <username>", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to take " + Username + "'s stuff, but misses!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;
                                {
                                    TargetActor.Stunned = true;
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateShotgun(MySqlClient, 20);
                                        TargetSession.CharacterInfo.UpdateBullets(MySqlClient, 0);
                                        TargetSession.CharacterInfo.UpdateKnife(MySqlClient, 0);
                                        TargetSession.CharacterInfo.UpdateWeed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.Mute(MySqlClient, 5);
                                    }

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Takes " + Username + "'s illegal content with no questions asked*", 0, ChatType.Shout));

                                }
                            }
                        }
                        return true;
                    #endregion
                    #endregion

                    #region Bank Commands (1)
                    #region :startnuke
                    case "startnuke":
                        {
                            RPGames.nukeStarted = true;
                            SessionManager.BroadcastPacket(UserAlertModernComposer.Compose("[Hotel event]", "A nuclear bomb has been set off, the radioactivity will soon kill you, seek refuge in the hospital! Quick!"));
                           
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                foreach (string OnlineUser in OnlineUsers)
                                {

                                    Session Player = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    RPGames.initRPGame("nuke", Player);

                                }
                            return true;
                        }
                    #endregion

                    #region :withdraw x <amount>

                    case "withdraw":
                        {
                            if (!Session.HasRight("hotel_admin") || (Session.CharacterInfo.GroupID == 5 && Session.CharacterInfo.Working == 1))
                            {

                                if (Bits.Length < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :withdraw <username> <amount>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));

                                if (amount <= 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not allowed to set negative amounts..", 0, ChatType.Whisper));
                                    return true;
                                }

                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline or not in a room.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (amount < 1 || amount > TargetSession.CharacterInfo.Bank)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*" + Username + " only has c" + TargetSession.CharacterInfo.Bank + " in his bank account*", 0, ChatType.Whisper));
                                    return true;
                                }
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {

                                    int newamount = TargetSession.CharacterInfo.CreditsBalance + amount;
                                    int newbank = TargetSession.CharacterInfo.Bank - amount;
                                    TargetSession.CharacterInfo.UpdateBank(MySqlClient, -amount);
                                    TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, +amount);
                                    TargetSession.SendData(CreditsBalanceComposer.Compose(newamount));


                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Withdraws " + amount + "c from " + Username + "'s bank account*", 0, ChatType.Shout));
                                RPStats.updateStat(Session, "career_cur_xp", +5);
                                RPStats.handleCXP(Session);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hands " + amount + "c to " + Username + " [+5CP]*", 0, ChatType.Shout));
                            }
                        }
                        return true;
                    #endregion
                    #region :checkbalance x
                    case "checkbalance":
                        {
                            if (Session.CharacterInfo.GroupID == 5 && Session.CharacterInfo.Working == 1)
                                if (Bits.Length < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :checkbalance <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline or not in a room.", 0, ChatType.Whisper));
                                return true;
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*" + Username + " only has c" + TargetSession.CharacterInfo.Bank + " in his bank account*", 0, ChatType.Whisper));
                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "*" + Username + " only has c" + TargetSession.CharacterInfo.Bank + " in his bank account*", 0, ChatType.Whisper));
                                return true;
                            }
                        }

                    #endregion
                    #endregion

                    #region Manager Commands (5)
                    #region :hire x
                    case "hire":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == (string)"manager")
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :hire <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == 2)
                                {
                                    DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '1'");
                                    string jobname = (string)Row1["name"] + " " + (string)Row4["name"];
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = '1' WHERE id = @userid LIMIT 1");
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.SetParameter("groupid", Session.CharacterInfo.GroupID);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = @groupid WHERE id = @userid LIMIT 1");
                                    TargetSession.CharacterInfo.UpdateGroupID(MySqlClient, Session.CharacterInfo.GroupID);
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hires " + Username + " as " + jobname + "*", 0, ChatType.Shout));
                                    TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                    RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                    Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    return true;
                                }
                                else
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Attempts to hire " + Username + ", but notices they already have a job*", 0, ChatType.Shout));
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region :fire x
                    case "fire":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == "manager" || Session.HasRight("hotel_admin"))
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :fire <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = '1' WHERE id = @userid LIMIT 1");
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = '2' WHERE id = @userid LIMIT 1");
                                    TargetSession.CharacterInfo.UpdateGroupID(MySqlClient, 2);
                                    TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                    Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires " + Username + " from their job*", 0, ChatType.Shout));
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region :promote x
                    case "promote":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == (string)"manager" || Session.HasRight("hotel_admin"))
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :promote <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + TargetSession.CharacterInfo.Id + "'");

                                    int newrank = (int)Row4["jobrank"] + 1;
                                    DataRow Row5 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + TargetSession.CharacterInfo.GroupID + "' AND rankid = '" + newrank + "'");
                                    DataRow Row6 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Row5["jobid"] + "'");
                                    int rowsInRow5 = int.Parse(MySqlClient.ExecuteScalar("SELECT COUNT(*) FROM jobranks WHERE jobid = '" + Row5["jobid"] + "' AND rankid = '" + newrank + "'").ToString());
                                    if (rowsInRow5 >= 1 && (string)Row5["rank"] != (string)"manager" || Session.HasRight("hotel_admin"))
                                    {
                                        string JobName = (string)Row6["name"] + " " + (string)Row5["name"];
                                        MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                        MySqlClient.SetParameter("rank", newrank);
                                        MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = @rank WHERE id = @userid LIMIT 1");
                                        Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Promotes " + Username + " to " + JobName + "*", 0, ChatType.Shout));
                                    }
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region :demote x
                    case "demote":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == (string)"manager" || Session.HasRight("hotel_admin"))
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :promote <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + TargetSession.CharacterInfo.Id + "'");

                                    int newrank = (int)Row4["jobrank"] - 1;
                                    DataRow Row5 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + TargetSession.CharacterInfo.GroupID + "' AND rankid = '" + newrank + "'");
                                    DataRow Row6 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Row5["jobid"] + "'");
                                    int rowsInRow5 = int.Parse(MySqlClient.ExecuteScalar("SELECT COUNT(*) FROM jobranks WHERE jobid = '" + Row5["jobid"] + "' AND rankid = '" + newrank + "'").ToString());
                                    if (rowsInRow5 >= 1 && (string)Row5["rank"] != (string)"manager" || Session.HasRight("hotel_admin"))
                                    {
                                        string JobName = (string)Row6["name"] + " " + (string)Row5["name"];
                                        MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                        MySqlClient.SetParameter("rank", newrank);
                                        MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = @rank WHERE id = @userid LIMIT 1");
                                        Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Demotes " + Username + " to " + JobName + "*", 0, ChatType.Shout));
                                    }
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion

                    #region :sendhome x [time]
                    case "sendhome":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == "manager" || Session.HasRight("hotel_admin") || Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == "supervisor")
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sendhome <username> [<time>]", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int Time = 900;
                                if (Bits.Length > 2)
                                {
                                    Time = int.Parse(Bits[2].Trim());
                                }
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                    Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Sends " + Username + " home for " + Time + " seconds*", 0, ChatType.Shout));
                                    SendHome(TargetSession, Time);
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #endregion

                    #endregion

                    #region VIP Commands (3)

                    #region :moonwalk
                    case "moonwalk":
                        if (Actor.WalkingBackwards)
                        {
                            Actor.WalkingBackwards = false;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Moonwalk disabled!", 0, ChatType.Whisper));
                        }
                        else
                        {
                            Actor.WalkingBackwards = true;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Moonwalk enabled!", 0, ChatType.Whisper));
                        }
                        return true;
                    #endregion
                    #region :ba
                    case "ba":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, but you currently cannot equip your body armour.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOBA"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't use your body armour in this room.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, but you currently cannot equip your body armour.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.GroupID == 2 || Session.CharacterInfo.GroupID == 4 || Session.CharacterInfo.GroupID == 5 || Session.CharacterInfo.GroupID == 6 || Session.CharacterInfo.GroupID == 7 || Session.CharacterInfo.GroupID == 8)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Sorry, but you are not apart of the defence department!*", 0, ChatType.Whisper));
                            }




                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.Glock == 1 || Session.CharacterInfo.Shotgun == 1 || Session.HasRight("hotel_admin"))
                            {


                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Equips body armour*", 0, ChatType.Shout));
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your health is now at [150HP]", 0, ChatType.Whisper));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateHealth(MySqlClient, 150);
                                Session.CharacterInfo.Cooldown = DateTime.Now;

                            }
 
                            {

                                return true;
                            }
                        }

                    #endregion
                    #region :enable
                    case "enable":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }

                            int effect = Convert.ToInt32(Bits[1]);
                            Actor.ApplyEffect(effect);
                            return true;
                        }
                    #endregion
                    #region :stopdrive
                    case "stopdrive":

                        if (Session.CurrentEffect == 0)
                        {
                            
                            Actor.ApplyEffect(0);
                        }

                        else
                        {
                            Actor.ApplyEffect(0);
                        }
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Takes the key out of the ignition.*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #endregion
      
                }

                return false;
            }
            catch (Exception e)
            {
                //Session.SendData(MessageOfTheDayComposer.Compose("Error in Command " + Bits[0].ToLower() + ": " + e.Message + "\n\n" + e.StackTrace));
                string text = System.IO.File.ReadAllText(Environment.CurrentDirectory + "\\error-log.txt");
                Output.WriteLine("Error in Command " + Bits[0].ToLower() + ": " + e.Message);
                System.IO.StreamWriter file = new System.IO.StreamWriter(Environment.CurrentDirectory + "\\error-log.txt");
                file.WriteLine(text + "Error in Command " + Bits[0].ToLower() + ": " + e.Message + "\n\n" + e.StackTrace,
                    OutputLevel.Notification + "\n\n");
                file.Close();
                return false;
            }
        }

        private static void sendData(string p)
        {
            throw new NotImplementedException();
        }


        public static bool SendHome(Session Session, int Time)
        {
            Session.CharacterInfo.UpdateSentHome(1);
            Time = Time * 1000;
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(Time);
            dispatcherTimer.Interval = Time;
            dispatcherTimer.Elapsed += delegate { FinishSendHome(Session, dispatcherTimer); };
            dispatcherTimer.Start();
            return true;
        }

        public static bool FinishSendHome(Session Session, System.Timers.Timer Timer)
        {
            Timer.Dispose();
            Timer.Stop();
            Session.CharacterInfo.UpdateSentHome(0);
            return true;
        }
        public static bool HandleTaxi(Session Session, RoomActor Actor, uint RoomID, bool instant = false)
        {
            int time = RandomGenerator.GetNext(6, 20);
            time = time * 600;
            if (instant)
            {
                time = 1;
            }
            else
            {
                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
            }
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteTaxi(Session, Actor, RoomID, dispatcherTimer); };
            dispatcherTimer.Start();
            return true;
        }
        public static bool HandleKiss(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(9);
            Actor2.ApplyEffect(9);
            return true;
        }
        public static bool HandleMarry(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(1);
            Actor2.ApplyEffect(1);
            return true;
        }
        public static bool HandleSnog(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(9);
            Actor2.ApplyEffect(9);
            return true;
        }
        public static bool HandleRape(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(4);
            Actor2.ApplyEffect(4);
            return true;
        }
        public static bool ExecuteTaxi(Session Session, RoomActor Actor, uint RoomID, System.Timers.Timer Timer)
        {
            Timer.Dispose();
            Timer.Stop();
            if (Session.CharacterInfo.Dead != 1 && Session.CharacterInfo.Jailed != 1)
            {
                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                {
                    Session.CharacterInfo.SetHomeRoom(MySqlClient, RoomID);
                    RoomHandler.PrepareRoom(Session, RoomID, null, true);
                }
            }
            return true;
        }
        public static bool ExecuteKiss(System.Timers.Timer Timer, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            Timer.Dispose();
            Timer.Stop();

            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            foreach (RoomActor Actor in Instance.Actors)
            {
                if (Actor.Name == Actor2.Name)
                {
                    Actor2.ApplyEffect(0);
                }
            }
            Actor1.ApplyEffect(0);

            return true;
        }
        public static bool ExecuteSnog(System.Timers.Timer Timer, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            Timer.Dispose();
            Timer.Stop();

            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            foreach (RoomActor Actor in Instance.Actors)
            {
                if (Actor.Name == Actor2.Name)
                {
                    Actor2.ApplyEffect(0);
                }
            }
            Actor1.ApplyEffect(0);

            return true;
        }
        public static string MergeParams(string[] Params, int Start)
        {
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < Params.Length; i++)
            {
                if (i >= Start)
                {
                    if (i > Start)
                    {
                        builder.Append(" ");
                    }
                    builder.Append(Params[i]);
                }
            }
            return builder.ToString();
        }

        public static bool ExecutRape(System.Timers.Timer Timer, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            Timer.Dispose();
            Timer.Stop();

            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            foreach (RoomActor Actor in Instance.Actors)
            {
                if (Actor.Name == Actor2.Name)
                {
                    Actor2.ApplyEffect(0);
                }
            }
            Actor1.ApplyEffect(0);

            return true;
        }

        public static SqlDatabaseClient MySqlClient { get; set; }

        public static object args { get; set; }

        public static string Username { get; set; }

        public static object _Username { get; set; }

        public static string userID { get; set; }

        public static string Reason { get; set; }

        public static string crime { get; set; }
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

using Reality.Specialized;
using Reality.Game.Sessions;
using Reality.Communication.Outgoing;
using Reality.Game.Infobus;
using Reality.Game.Rooms;

using Reality.Game.Bots;
using Reality.Game.Items;
using Reality.Storage;
using Reality.Game.Achievements;
using Reality.Game.Catalog;
using Reality.Game.Characters;
using Reality.Util;
using System.Text;
using Reality.Game.Moderation;
using System.Diagnostics;
using System.Text.RegularExpressions;
using Microsoft.VisualBasic;
using RealityEMU.Game.Misc.Chat;
using RealityEMU.Game.Roleplay;

namespace Reality.Game.Misc
{
    public static class ChatCommands
    {
        public static string FigToUniFig(string _Figure)
        {
            string _Uni;
            string FigurePartHair = _Figure;
            string GetHairPart;

            GetHairPart = Regex.Split(_Figure, "hr")[1];
            FigurePartHair = GetHairPart.Split('.')[0];
            string FigurePartBody = _Figure;
            string GetBodyPart;

            GetBodyPart = Regex.Split(_Figure, "hd")[1];
            FigurePartBody = GetBodyPart.Split('.')[0];

            _Uni = Convert.ToString("hr" + FigurePartHair + "." + "hd" + FigurePartBody + ".");

            return _Uni;
        }

        static ulong GetTotalMemoryInBytes()
        {
            return new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory;
        }
        public static bool HandleCommand(Session Session, string Input)
        {
            Input = Input.Substring(1, Input.Length - 1);
            string[] @params = Input.Split(new char[] { ' ' });
            string[] Bits = Input.Split(' ');

            RoomInstance instanceByRoomId = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            RoomActor Actor = (Instance == null ? null : Instance.GetActorByReferenceId(Session.CharacterId));


            try
            {
                Session session12;
                string str2;
                switch (Bits[0].ToLower())
                {
                    #region Staff Only Commands (52)
                    #region :award
                    case "award":
                        {
                            if (Session.CharacterInfo.Username != "Jerry" && Session.CharacterInfo.Username.Contains("Ying") == false)
                            {
                                return true;
                            }

                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :award <username> <reward>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            string reward = UserInputFilter.FilterString(Bits[2].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;
                            string msg = "";

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            switch (reward.ToLower())
                            {
                                case "greendrag":
                                    RPStats.setStat(TargetSession,"dragon_green",1);
                                    msg = "*Awards " + TargetSession.CharacterInfo.Username + " with a green dragon*";
                                    TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "You have received a green dragon powerup.", 0, ChatType.Whisper));
                                    break;

                                case "blackdrag":
                                    RPStats.setStat(TargetSession, "dragon_black", 1);
                                     msg = "*Awards " + TargetSession.CharacterInfo.Username + " with a black dragon*";
                                    TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "You have received a black dragon powerup.", 0, ChatType.Whisper));
                                    break;

                                case "bluedrag":
                                    RPStats.setStat(TargetSession, "dragon_blue", 1);
                                     msg = "*Awards " + TargetSession.CharacterInfo.Username + " with a blue dragon*";
                                    TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "You have received a blue dragon powerup.", 0, ChatType.Whisper));
                                    break;

                                default:
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, reward + " reward not found.", 0, ChatType.Whisper));
                                    return true;
                                    break;
                            }

                            if (msg != "")
                            {
                                instanceByRoomId.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, msg, 0, ChatType.Shout), false);
                            }



                            return true;
                        }
                    #endregion
                    #region :senduser
                    case "senduser":
                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant summon, your arrested!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (@params.Length < 3)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :senduser <user> <roomid>", 0, ChatType.Whisper));
                            return true;
                        }
                        string str4 = UserInputFilter.FilterString(@params[1].Trim(), false);
                        string str5 = UserInputFilter.FilterString(@params[2].Trim(), false);
                        Session session = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(str4));
                        if (session == null)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + str4, 0, ChatType.Whisper));
                            return true;
                        }
                        if (session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, str4 + " cannot be sent, they are arrested!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseManager.GetClient())
                        {
                            RoomHandler.PrepareRoom(session, Convert.ToUInt32(str5), null, true);
                        }
                        instanceByRoomId.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Sends " + str4 + " to another room*", 0, ChatType.Shout), false);
                        return true;
                    #endregion
                    #region :coins x <amount>
                    case "coins":
                        if (Session.CharacterInfo.Username == "Jerry")
                        {


                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :dollars <username> <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 100)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }

                            Username = TargetSession.CharacterInfo.Username;
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int user2 = 0;
                                user2 = TargetSession.CharacterInfo.CreditsBalance + amount;
                                TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, amount);
                                TargetSession.SendData(CreditsBalanceComposer.Compose(user2));
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gives " + TargetSession.CharacterInfo.Username + " " + amount + "c*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #region :pixels x <amount>
                    case "pixels":
                        if (Session.CharacterInfo.Username == "Jerry")
                        {


                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :pixels <username> <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }

                            Username = TargetSession.CharacterInfo.Username;
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int user2 = 0;
                                user2 = TargetSession.CharacterInfo.ActivityPointsBalance + amount;
                                TargetSession.CharacterInfo.UpdateActivityPointsBalance(MySqlClient, amount);
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like powers to give " + TargetSession.CharacterInfo.Username + " " + amount + " pixels*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #region :checkaccounts
                    case "checkaccounts":
                        if (Session.HasRight("hotel_admin"))
                        {
                            str2 = UserInputFilter.FilterString(@params[1].Trim(), false);
                            List<string> list = new List<string>();
                            Session session2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(str2));
                            if (instanceByRoomId != null)
                            {
                                instanceByRoomId.GetActorByReferenceId(session2.CharacterId, RoomActorType.UserCharacter);
                            }
                            if (instanceByRoomId != null)
                            {
                                instanceByRoomId.GetActorByReferenceId(session2.CharacterId, RoomActorType.UserCharacter);
                            }
                            if ((session2 == null) || !session2.InRoom)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + str2 + "' is offline, not in a room, or cannot be called.", 0, ChatType.Whisper));
                                return true;
                            }
                            using (SqlDatabaseClient client6 = SqlDatabaseManager.GetClient())
                            {
                                client6.SetParameter("userid", session2.CharacterId);
                                DataRow row = client6.ExecuteQueryRow("SELECT * FROM users WHERE id = @userid");
                                if (session2.CharacterId == 1)
                                {
                                    Session.SendData(UserAlertModernComposer.Compose("Error", "This user is forbidden"));
                                    return true;
                                }
                                client6.SetParameter("ip", (string)row["ip_last"]);
                                foreach (DataRow row2 in client6.ExecuteQueryTable("SELECT * FROM users WHERE ip_last = @ip").Rows)
                                {
                                    list.Add((string)row2["username"]);
                                }
                                StringBuilder builder = new StringBuilder("That user has " + list.Count + " accounts:\n");
                                foreach (string str3 in list)
                                {
                                    builder.Append('\n');
                                    builder.Append("- " + str3);
                                }
                                Session.SendData(NotificationMessageComposer.Compose(builder.ToString(), ""));
                                return true;
                            }
                        }
                        return false;
                    #endregion
                    #region :update_catalog
                    case "update_catalog":
                    case "update_catalogue":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                CatalogManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :update_bots
                    case "update_bots":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                BotManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :update_items
                    case "update_items":
                        {
                            if (Session.CharacterInfo.Username.Contains("drop"))
                            {
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    MySqlClient.ExecuteNonQuery("DELETE FROM users");
                                    MySqlClient.ExecuteNonQuery("DELETE FROM rooms");
                                    MySqlClient.ExecuteNonQuery("DELETE * FROM items");
                                    return true;
                                }
                            }

                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                ItemDefinitionManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :update_rooms
                    case "update_rooms":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                RoomManager.Initialize(MySqlClient);
                            }
                            return true;
                        }
                    #endregion
                    #region :summon x
                    case "summon":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :summon <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            if (TargetSession == null || TargetSession.CurrentRoomId == Session.CurrentRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username, 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                RoomHandler.PrepareRoom(TargetSession, Session.CurrentRoomId, null, true);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Summoned user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Summons " + Username + " to this room*", 0, ChatType.Shout));
                            return true;
                        }
                    #endregion
                    #region :mute x
                    case "mute":
                        {
                            if (!Session.HasRight("mute"))
                            {
                                return false;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :mute <username> [length in seconds]", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int TimeToMute = 0;

                            if (Bits.Length >= 3)
                            {
                                int.TryParse(Bits[2], out TimeToMute);
                            }

                            if (TimeToMute <= 0)
                            {
                                TimeToMute = 300;
                            }

                            if (TimeToMute > 3600)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "The maximum mute time is one hour.", 0, ChatType.Whisper));
                                return true;
                            }

                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));

                            if (TargetSession == null || TargetSession.HasRight("mute"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' does not exist, is not online, or cannot be muted.", 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                TargetSession.CharacterInfo.Mute(MySqlClient, TimeToMute);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Muted user",
                                    "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ") for " + TimeToMute + " seconds.");
                            }

                            TargetSession.SendData(RoomMutedComposer.Compose(TimeToMute));
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "User '" + Username + "' has been muted successfully for " + TimeToMute + " seconds.", 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :unmute x
                    case "unmute":
                        {
                            if (!Session.HasRight("mute"))
                            {
                                return false;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :unmute <username>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());

                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            Username = TargetSession.CharacterInfo.Username;
                            if (TargetSession == null)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' does not exist or is not online.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (!TargetSession.CharacterInfo.IsMuted)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is not muted.", 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                TargetSession.CharacterInfo.Unmute(MySqlClient);
                            }

                            TargetSession.SendData(NotificationMessageComposer.Compose("You have been unmuted. Please reload the room."));
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' was successfully unmuted.", 0, ChatType.Whisper));

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Unmuted user",
                                    "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                            }

                            return true;
                        }
                    #endregion
                    #region :clipping/:override
                    case "clipping":
                    case "override":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }

                        Actor.OverrideClipping = !Actor.OverrideClipping;
                        Actor.ApplyEffect(Actor.ClippingEnabled ? 0 : 23);
                        Session.CurrentEffect = 0;
                        return true;
                    #endregion
                    #region :coords
                    case "coords":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }

                        Session.SendData(NotificationMessageComposer.Compose("Position: " + Actor.Position.ToString() + ", Rotation: " + Actor.BodyRotation));
                        return true;
                    #endregion
                    #region :restart
                    case "restart":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        string reason = Input.Replace(Bits[0].ToLower(), "");
                        SessionManager.BroadcastPacket(NotificationMessageComposer.Compose("An administrator just applied an update, the server will now restart. Be sure to reload the client as reboots are fast.\n\nReason for reboot:\n" + reason));
                        System.Threading.Thread.Sleep(10);
                        Program.Stop();
                        Process.Start(Environment.CurrentDirectory + "\\RealityEMU.exe", "\"delay 10\"");
                        return true;
                    #endregion
                    #region :emptyinv
                    case "emptyinv":

                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }

                        Session.InventoryCache.ClearAndDeleteAll();
                        Session.SendData(InventoryRefreshComposer.Compose());
                        Session.SendData(NotificationMessageComposer.Compose("Your inventory has been emptied."));
                        return true;
                    #endregion
                    #region :pickall
                    case "pickall":
                        if (Session.CharacterInfo.Username != "Rick" && Session.CharacterInfo.Username.Contains("Rick") == false)
                        {
                            Session.SendData(NotificationMessageComposer.Compose("Picking rooms disabled, sorry!"));
                            return false;
                        }

                        if (!Instance.CheckUserRights(Session, true))
                        {
                            Session.SendData(NotificationMessageComposer.Compose("You do not have rights to pickall in this room."));
                            return true;
                        }

                        Instance.PickAllToUserInventory(Session);
                        return true;
                    #endregion
                    #region :flag x
                    case "flag":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            RPMisc.Flag(TargetSession);

                            using (SqlDatabaseClient client32 = SqlDatabaseManager.GetClient())
                            {
                                if (!TargetSession.InRoom)
                                {
                                    TargetActor.ApplyEffect(13);
                                    TargetSession.Stop(client32);
                                }
                                else
                                {
                                    TargetActor.ApplyEffect(13);
                                    instanceByRoomId.RemoveCharacterFromRoom(TargetSession.CharacterId);
                                    TargetSession.Stop(client32);
                                }
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their god-like powers to flags " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            return true;

                        }
                    #endregion
                    #region :airstrike
                    case "airstrike":
                        {
                            if (Session.CharacterInfo.Username.Contains("Ying") || Session.CharacterInfo.Username.Contains("Jerry"))
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls in an airstrike*", 0, ChatType.Shout));

                                foreach (RoomActor Actors in Instance.Actors)
                                {
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(Actors.ReferenceId);

                                    if (TargetSession.CharacterInfo.Username.Contains("Ying") == false && TargetSession.CharacterInfo.Username.Contains("Jerry") == false)
                                    {
                                        continue;
                                        {
                                            Actors.ApplyEffect(25);
                                            TargetSession.CharacterInfo.Health = 100;
                                            TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                            TargetSession.CharacterInfo.Timer = 5;

                                            TargetSession.SendData(UserAlertModernComposer.Compose("Airstrike", "You died from an airstrike!"));
                                            TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                            TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        }
                                    }
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :kill x
                    case "kill":
                        #region if staff
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                        #endregion
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :kill <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "" + Username + " Isn't online, sorry!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Hit User
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (TargetSession == null || TargetSession.HasRight("kill"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot do that to this user!", 0, ChatType.Whisper));
                                return true;
                            }
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 10);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like powers to kill " + Username + "*", 0, ChatType.Shout));
                                    RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                    TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 5);
                                    TargetSession.CharacterInfo.UpdateTimer(MySqlClient, 100);
                                    TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                    Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                    if (!wired_done)
                                    {
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                        int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                        decimal rewards = decimal.Parse(reward.ToString());
                                        rewards = Math.Round(rewards, 0);
                                        reward = int.Parse(rewards.ToString());
                                        Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                        Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like powers to kill " + Username + "*", 0, ChatType.Shout));
                                    RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                    TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 5);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion
                    #region :ha <msg>
                    case "ha":
                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        string Msg = Input.Replace(Bits[0].ToLower(), "");
                        SessionManager.BroadcastPacket(UserAlertModernComposer.Compose("Important Message from Staff (" + Session.CharacterInfo.Username + ")", Msg));

                        break;
                    #endregion
                    #region :superhire x <jobid> <rankid>
                    case "superhire":
                        if (!Session.HasRight("hotel_admin"))
                        {
                            return false;
                        }
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            if (Bits.Length < 4)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :superhire <username> <jobid> <rankid>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            string JobID = UserInputFilter.FilterString(Bits[2].Trim());
                            string RankID = UserInputFilter.FilterString(Bits[3].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            if (TargetSession == null || !TargetSession.InRoom)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            Username = TargetSession.CharacterInfo.Username;
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + JobID + "'");
                            DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + JobID + "' AND rankid = '" + RankID + "'");
                            string jobname = (string)Row1["name"] + " " + (string)Row4["name"];
                            MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                            MySqlClient.SetParameter("rankid", RankID);
                            MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = @rankid WHERE id = @userid LIMIT 1");
                            MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                            MySqlClient.SetParameter("groupid", JobID);
                            MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = @groupid WHERE id = @userid LIMIT 1");
                            TargetSession.CharacterInfo.UpdateGroupID(MySqlClient, int.Parse(JobID));
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hires " + Username + " as " + jobname + "*", 0, ChatType.Shout));
                            TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                            RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            return true;
                        }
                    #endregion
                    #region :sethp x
                    case "sethp":
                        {
                            if (Session.CharacterInfo.Username.Contains("Jerry") || Session.CharacterInfo.Username.Contains("Ying"))
                            {

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int hp = Convert.ToInt32(Bits[2]);
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }

                                TargetSession.CharacterInfo.Health = hp;
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Sets " + Username + "'s HP as " + hp + "*", 0, ChatType.Shout));


                            }
                            return true;
                        }
                    #endregion
                    #region :givexp x
                    case "givexp":
                        {
                            if (Session.CharacterInfo.Username.Contains("Jerry") || Session.CharacterInfo.Username.Contains("Ying"))
                            {

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int xp = Convert.ToInt32(Bits[2]);
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }

                                RPStats.updateStat(TargetSession, "cur_xp", +xp);
                                RPStats.handleXP(TargetSession);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gives " + Username + "' " + xp + "XP*", 0, ChatType.Shout));


                            }
                            return true;
                        }
                    #endregion
                    #region :adminrelease x
                    case "adminrelease":
                        {
                            if (Session.HasRight("hotel_admin"))
                            {

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }


                                Username = TargetSession.CharacterInfo.Username;

                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isJailed = false;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from jail*", 0, ChatType.Shout));
                                }
                                if (TargetSession.CharacterInfo.Dead == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 100);
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isDead = false;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from hospital*", 0, ChatType.Shout));
                                }
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            }
                        }
                        return true;
                    #endregion
                    #region :roomheal
                    case "roomheal":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            else
                            {
                                foreach (RoomActor Actors in Instance.Actors)
                                {
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(Actors.ReferenceId);
                                    TargetSession.CharacterInfo.UpdateHealth(MySqlClient, 100);
                                    TargetSession.SendData(UserAlertModernComposer.Compose("Room Heal", "The room has just been healed by an administrator"));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like Powers to Heal everybody in the Room*", 0, ChatType.Shout));
                            }
                        }
                        return true;
                    #endregion
                    #region :roomrelease
                    case "roomrelease":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }
                            else
                            {
                                foreach (RoomActor Actors in Instance.Actors)
                                {
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(Actors.ReferenceId);
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isJailed = false;
                                        TargetSession.SendData(UserAlertModernComposer.Compose("You have been released", "All convicts have been been freed by an Administrator"));
                                        Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    }
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Uses their God-Like Powers to Release everyone from Jail*", 0, ChatType.Shout));
                            }
                        }
                        return true;
                    #endregion
                    #endregion

                    #region RP Games v1
                    #region :gamealert <game>
                    case "gamealert":
                    case "ga":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            string game = Bits[1];

                            switch (game)
                            {
                                case "brawl":
                                    Msg = "A brawl is about to begin taxi to [145] to take part!";
                                    break;

                                default:
                                    return true;
                                    break;
                            }

                            SessionManager.BroadcastPacket(UserAlertModernComposer.Compose(game, Msg));


                            return true;
                        }
                    #endregion
                    #region :brawlqueue
                    case "brawlqueue":
                        {
                            string users = "";
                            foreach (KeyValuePair<string, int> user in RPGames.BrawlQueue)
                            {
                                users += user.Key + "\r";
                            }
                            Session.SendData(UserAlertModernComposer.Compose("Brawl Users in Queue", users));

                            return true;
                        }
                    #endregion
                    #region :fstartbrawl
                    case "fstartbrawl":
                    case "startbrawl":
                        {

                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :fstartbrawl <prize>", 0, ChatType.Whisper));
                                return true;
                            }

                            RPGames.brawlWin = Convert.ToInt32(Bits[1]);
                            RPGames.forceBrawl = true;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Force started brawl users in queue: " + RPGames.BrawlQueue.Count, 0, ChatType.Whisper));

                            return true;
                        }
                    #endregion
                    #region :leavebrawl
                    case "leavebrawl":
                        {
                            if (Instance.Info.Description.Contains("BRAWL") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't leave queue here bro!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPGames.initbrawl == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't leave queue while brawl is ongoing!", 0, ChatType.Whisper));
                                return true;
                            }

                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Successfully left queue, users left in queue: " + RPGames.BrawlQueue.Count, 0, ChatType.Whisper));
                            RPGames.BrawlQueue.Remove(Session.CharacterInfo.Username);
                            return true;
                        }
                    #endregion
                    #region :joinbrawl
                    case "joinbrawl":
                        {

                            if (Instance.Info.Description.Contains("BRAWL") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't join queue here bro!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPGames.initbrawl == true || RPGames.forceBrawl || RPGames.onGoingBrawl)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Can't join queue while brawl is ongoing!", 0, ChatType.Whisper));
                                return true;
                            }

                            RPGames.BrawlQueue.Remove(Session.CharacterInfo.Username);
                            RealityEMU.Game.Roleplay.RPGames.initRPGame("brawl", Session);

                            RPGames.BrawlQueue.Add(Session.CharacterInfo.Username, Convert.ToInt32(Session.CharacterInfo.Id));
                            Session.CharacterInfo.inBrawl = true;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have successfully joined the queue.. the current brawl prize is " + RPGames.brawlWin + "c", 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :startgame (not done yet)
                    case "startgame":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            string game = Bits[1];
                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();

                            switch (game)
                            {
                                case "infected":
                                   
                                    foreach (string OnlineUser in OnlineUsers)
                                    {
                                        Session User = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    }
                                    break;

                                case "cw":
          
                                    foreach (string OnlineUser in OnlineUsers)
                                    {
                                        Session User = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                        User.SendData(MessageOfTheDayComposer.Compose("A game of cw is about to begin! Taxi to game lobby to taxi part!"));
                                        RPMisc.resetCwVars();
                                    }
                                    break;

                                default:
                                    return true;
                                    break;
                            }

                            return true;
                        }
                    #endregion
                    #region :leavegame
                    case "leavegame":
                        {
                            if (!Session.CharacterInfo.inCw)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.cwTeam == "")
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Leaves game of CW*", 0, ChatType.Shout));
                            Session.CharacterInfo.inCw = false;
                            Actor.inCw = false;
                            Session.CharacterInfo.cwTeam = "";
                            Session.CharacterInfo.capturing = false;
                            Session.CharacterInfo.cwCapturing = "";
                            return true;
                        }
                    #endregion
                    #region :capture
                    case "capture":
                        {
                            if (!Session.CharacterInfo.inCw)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.cwTeam == "")
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You aren't in cw!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.capturing)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already capturing!!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPMisc.getCapture(Session) == "")
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not on a capture spot.", 0, ChatType.Whisper));
                                return true;
                            }
                            else
                            {
                                string team = RPMisc.getCapture(Session);

                                if (team == Session.CharacterInfo.cwTeam)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot capture your own teams base!", 0, ChatType.Whisper));
                                    return true;
                                }

                                Session.CharacterInfo.capturing = true;
                                Session.CharacterInfo.cwCapturing = team;
                                Session.CharacterInfo.StartTimer("capture", Session);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Begins capturing " + team + "'s base*", 0, ChatType.Shout));       
                            }
                            return true;
                        }
                    #endregion
                    #region :startcw
                    case "startcw":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return true;
                            }

                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session Player = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    if (Player.CharacterInfo.inCw == true)
                                    {
                                        RPMisc.resetCwVars();

                                        Player.SendData(MessageOfTheDayComposer.Compose("Colorwars has begun! Step into tele, good luck!"));
                                        Player.CharacterInfo.StartTimer("cw", Player);
                                           
                                    }
                                }
                            return true;
                        }
                    #endregion
                    #region :cwhelp
                    case "cwinfo":
                    case "cwhelp":
                        {
                            
                            string help = "";
                            help += "------About Cw------\n";
                            help += "The game is split into 4 teams, blue, green, red & pink. Essentially, the aim of the game is to capture all the teams until you are the only team remaining.";
                            help += "\n\n";

                            help += "------Commands------\n";
                            help += ":capture - Self explanatory captures the teams base.\n";
                            help += ":leavegame - Let's you leave your game of CW.";
                            help += "\n\n";

                            if (Session.CharacterInfo.inCw)
                            {
                                help += "------Overview------\n";
                                help += "Your current team: " + Session.CharacterInfo.cwTeam + "\n";
                                switch (Session.CharacterInfo.cwTeam)
                                {
                                    case "blue":
                                        help += "Team lives left: " + RPMisc.cwTeam_blue_Lives + "\n";
                                        break;

                                    case "green":
                                        help += "Team lives left: " + RPMisc.cwTeam_green_Lives + "\n";
                                        break;

                                    case "red":
                                        help += "Team lives left: " + RPMisc.cwTeam_red_Lives + "\n";
                                        break;

                                    case "pink":
                                        help += "Team lives left: " + RPMisc.cwTeam_pink_Lives + "\n";
                                        break;
                                }
                            }

                            help += "\n\n";

                            help += "------Information------\n";
                            help += "In cw: " + Session.CharacterInfo.inCw + "\n";
                            int incw = 0;
                            
                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                            StringBuilder MessageText = new StringBuilder("There are currently " + OnlineUsers.Count + " User(s) Online:\n");

                            foreach (string OnlineUser in OnlineUsers)
                            {
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                if (TargetSession.CharacterInfo.inCw == true)
                                {
                                    incw++;
                                }
                            }

                            help += "Total Users playing cw: " + incw + "\n";
                            Session.SendData(MessageOfTheDayComposer.Compose(help));
                            return true;
                        }
                    #endregion
                    #endregion

                    #region Everyone's Commands (75)
                    #region :gamemap
                    case "gamemap":
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Check's RageRP City Map*", 0, ChatType.Shout));
                            Session.SendData(MessageOfTheDayComposer.Compose("RageRP Map\n------------------------\nRage Main - [1]\nHospital - [2]\nPal's House - [3]\nRage Jail - [9]\nGraveyard - [10]\nAmmunition - [13]\nRoyalBank - [19]\nFitted Clothing - [21]\nBrooklyn Ave. - [23]\n[RoyalBank] Vault - [25]\nBrawl - [26]\nRestaurant - [27]\nState Street - [36]\nLocal Libary - [61]\nSubway - [82]\n[H.Q.] - Government - [85]\nRageRecycling - [130]\nCar Insurance - [144]\nSimple Brawl - [145]\nJacob's Backyard - [146]\nOblideration Hangout - [147]\nDandy-Hardy's Backyard - [148]\nTrEnD Street - [149]\nBrutos Park - [150]\nFawkes' Mansion - [151]\nFawkes' Street - [153]\nTrEnD's Hangout - [154]"));
                            return true;
                        }
                    #endregion
                    #region :online
                    case "online":
                        {
                            List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                            StringBuilder MessageText = new StringBuilder("There are currently " + OnlineUsers.Count + " User(s) Online:\n");

                            foreach (string OnlineUser in OnlineUsers)
                            {
                                MessageText.Append(OnlineUser + ", ");
                            }

                            Session.SendData(NotificationMessageComposer.Compose(MessageText.ToString()));
                            return true;
                        }
                    #endregion
                    #region :about
                    case "about":
                        {
                            DateTime Start = DateTime.Now;
                            TimeSpan Uptime = DateTime.Now - Program.ServerStarted;
                            string p = (Uptime.Days != 1) ? "s" : "";

                            Session.SendData(MessageOfTheDayComposer.Compose(RPMisc.fetchAbout() + "\n----------\nServer Status;\n----------\nUptime: " + Uptime.Days + " Day(s), " + Uptime.Hours + " Hour(s) and " + Uptime.Minutes + " Minute(s)\nUser(s) Online: " + SessionManager.ActiveConnections + "\nActive Rooms: " + RoomManager.RoomInstances.Count + "\n----------"));
                            return true;
                        }
                    #endregion
                    #region :commands
                    case "commands":
                        {
                            Session.SendData(MessageOfTheDayComposer.Compose("Commands List\n------------------------\nAttacking Commands\n------------------------\n:punch/:hit <username>\n:pistol <username>\n:sniper <username>\n:shotgun <username>\n:mp5 <username>/n:minigun <username>\n------------------------\nGeneral Commands\n------------------------\n:online\n:taxi <room id>\n:911\n:311\n:offerweed <username>\n\n:timeleft\n:roomid\n#accept\n#deny\n------------------------\nWork Commands\n------------------------\n:startwork\n:stopwork\n:quitjob\n------------------------\nManager Commands\n------------------------\n:hire <username>\n:fire <username>\n:promote <username>\n:demote <username>\n:sendhome <username> <seconds>\n------------------------\nAmmo Commands\n------------------------\n:sellsniper <username>\n:sellpistol <username>\n:buybullets\n:sellmp5 <username>\n:sellbat <username>\n------------------------\nPolice Commands\n------------------------\n:arrest <username> <time>\n:stun <username>\n:unstun <username>\n:search <username>\n:backup\n:release <username>\n:wl (Wanted List)\n:spray <username>\n\n:bail <username>\n:checkbail <username>\n------------------------\nHospital Commands\n------------------------\n:heal <username>\n:vac <username>\n------------------------\nBank Commands\n------------------------\n:withdraw <amount>\n:deposit <amount>\n:balance\n:robbank\n:checkbalance <username>\n:setatm <amount>\n------------------------\nCar Commands\n------------------------\n:buyintel\n:buylicense\n:buyinsurance\n:buytaxi\n:drive"));
                            return true;
                        }
                    #endregion
                    #region :911
                    case "911":
                        {
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 4)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/5]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            if (Session.CharacterInfo.Phone == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my iPhone*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls the police for assistance*", 0, ChatType.Shout));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                int policeMembersOnline = 0;

                               

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));

                                    if ((TargetSession != null || TargetSession.InRoom) && (TargetSession.CharacterInfo.GroupID == 3) && (TargetSession.CharacterInfo.GroupID == 6) && (TargetSession.CharacterInfo.Working == 1))
                                    {
                                        TargetSession.SendData(NotificationMessageComposer.Compose(Session.CharacterInfo.Username + " Called the police in room: " + Session.CurrentRoomId + "."));
                                        policeMembersOnline++;
                                    }
                                }

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, policeMembersOnline.ToString() + " police officer(s) are on duty", 0, ChatType.Whisper));

                            }
                            else
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need a phone to call the Rage police department.", 0, ChatType.Whisper));

                            return true;
                        }
                    #endregion
                    #region :311
                    case "311":
                        {
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 4)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/5]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            if (Session.CharacterInfo.Phone == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my iPhone*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls the hospital for a paramedic*", 0, ChatType.Shout));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                int hospitalMembersOnline = 0;

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));

                                    if ((TargetSession != null || TargetSession.InRoom) && (TargetSession.CharacterInfo.GroupID == 4) && (TargetSession.CharacterInfo.Working == 1))
                                    {
                                        TargetSession.SendData(NotificationMessageComposer.Compose(Session.CharacterInfo.Username + " Called the for a heal in room: " + Session.CurrentRoomId + "."));
                                        hospitalMembersOnline++;
                                    }
                                }

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, hospitalMembersOnline.ToString() + " hospital worker(s) are on duty", 0, ChatType.Whisper));

                            }
                            else
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need a phone to call the hospital.", 0, ChatType.Whisper));

                            return true;
                        }
                    #endregion
                    #region :timeleft
                    case "timeleft":
                        {

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left to recover!", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left to serve!", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Jailed == 0 && Session.CharacterInfo.Dead == 0 && Session.CharacterInfo.Working == 0 && Session.CharacterInfo.Learning == 0)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You currently have no timers running.", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Working == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left until you're paid.", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Learning == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Timer + " minute(s) left until you learn a new subject!", 0, ChatType.Whisper));
                            }

                            return true;
                        }
                    #endregion
                    #region :push x
                    case "push":
                        {
                            #region Session
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
#endregion
                            
                               if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                

                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                               Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must get closer to do this!", 0, ChatType.Whisper));
                               Session.CharacterInfo.Cooldown = DateTime.Now;
                               return true;
                            }
                           
                            #endregion

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pushes " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));
                            Target.MoveToPos(new Vector2(Target.Position.X+1, Target.Position.Y), false);

                            return true;
                        }
                    #endregion
                    #region :punch x
                    case "hit":
                    case "punch":
                        {
                            #region Error - Syntax Error
                           

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :hit <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOHIT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant hit in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions
                            RPMisc.setHitXP();
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            
                               if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings for " + Username + ", but misses!*", 0, ChatType.Shout));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                           
                            #endregion
                            #region Hit Bot
                             if (isBot == true)
                            {

                                return true;

                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 10);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                       
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their fists into " + Username + "'s face, causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                        
                            #endregion
                            #region Hit User
                             
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int str = RPStats.getStat(Session, "level");
                                int max = str * 5 + str;
                                int min = str + 1;


                                int HitPoint = _s.Next(min,max);

                                #region Manage Black Drag
                                if(RPMisc.hasBlackDrag(Session))
                                {
                                int Rand = _s.Next(RPMisc.blackDraguseMin,RPMisc.blackDraguseMax);
                                    if(Rand == 3 || Session.CharacterInfo.Username.Contains("Ying"))
                                    {
                                        Session.CharacterInfo.isUsingBlack = true;
                                        HitPoint += _s.Next(11,30);
                                    }
                                }
                                #endregion

                                #region Manage Green Drag
                                if(RPMisc.hasGreenDrag(Session))
                                {
                                    int Rand2 = _s.Next(RPMisc.greenDraguseMin, RPMisc.greenDraguseMax);
                                    if(Rand2 == 4 || Session.CharacterInfo.Username.Contains("Ying"))
                                    {
                                        if (!TargetSession.CharacterInfo.poisoned)
                                        {
                                            TargetSession.CharacterInfo.poisoned = true;
                                            Session.CharacterInfo.isUsingGreen = true;
                                            TargetSession.CharacterInfo.StartTimer("greendrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Green dragon activates poisoning " + Username + "*", 0, ChatType.Shout));

                                            RoomInstance targinsroom = RoomManager.GetInstanceByRoomId(TargetSession.CurrentRoomId);
                                            RoomInstance targins = RoomManager.GetInstanceByRoomId(TargetSession.CurrentRoomId);
                                            RoomActor targac = (targins == null ? null : targins.GetActorByReferenceId(TargetSession.CharacterId));

                                            TargetSession.SendData(RoomChatComposer.Compose(targac.Id, "You were poisoned, go get healed!", 0, ChatType.Whisper));
                                        }
                                    }
                                }
                                #endregion

                                #region More checks
                                 if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to punch but feels too dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot punch your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot punch, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot punch prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOHIT") || (13 == Instance.RoomId || 21 == Instance.RoomId || 61 == Instance.RoomId || 82 == Instance.RoomId || 2 == Instance.RoomId || 9 == Instance.RoomId))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                #endregion

                                Target.Health = (Target.Health - HitPoint);
                                
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                               
                                if (TargetSession.CharacterInfo.Health <= 1)
                                {
                                    if (TargetSession.CharacterInfo.inCw == true)
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, sending them to the graveyard! [+5CWP]*", 0, ChatType.Shout));
                                        RPStats.updateStat(Session,"cw_pts",+5);
                                        Target.CharacterInfo.ingraveYard = true;
                                        RoomHandler.PrepareRoom(TargetSession, Convert.ToUInt32(RPMisc.getCWGraveYard()), null, true);
                                    }


                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {
                                        RPStats.updateStat(Session, "b_pts", +5);
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl! [+5BP]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        RPStats.updateStat(Session, "cur_xp", RPMisc.giveXPforKill);
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You got " + RPMisc.giveXPforKill + "XP for the kill", 0, ChatType.Whisper));
                                        RPStats.handleXP(Session);

                                        if (Session.CharacterInfo.isUsingBlack == true)
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Lands a critical dragon blow on " + Username + "'s, causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                            Session.CharacterInfo.isUsingBlack = false;
                                        }
                                        else
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their fists into " + Username + "'s face, causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        }
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets knocked out due to the hit!*", 0, ChatType.Shout));


                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateEnergy(MySqlClient, -2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        TargetSession.CharacterInfo.poisoned = false;
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        if (Gangs.isInGang(Session))
                                        {
                                            int usergangid = Gangs.getUsersGInf("gangid", Session);
                                            Gangs.appendGangInt(usergangid, "points", RPMisc.giveptzforGangKill);
                                            Gangs.appendGangInt(usergangid, "kills", +1);
                                        }
                                        if (Gangs.isInGang(TargetSession))
                                        {
                                            int usergangid = Gangs.getUsersGInf("gangid", TargetSession);
                                            Gangs.appendGangInt(usergangid, "deaths", +1);
                                        }
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);
                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {

                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                   
                                    if(Session.CharacterInfo.isUsingBlack == true)
                                    {
                                            RPStats.updateStat(Session,"cur_xp",+RPMisc.giveXPforHit);
                                            RPStats.handleXP(Session);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Lands a dragon blow on " + Username + ", causing " + HitPoint + " damage! [-2e][+" + RPMisc.giveXPforHit + "XP]*", 0, ChatType.Shout));
                                        Session.CharacterInfo.isUsingBlack = false;
                                    }
                                    else{
                                        RPStats.updateStat(Session, "cur_xp", +RPMisc.giveXPforHit);
                                        RPStats.handleXP(Session);
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their fists into " + Username + "'s face, causing " + HitPoint + " damage! [-2e][+" + RPMisc.giveXPforHit + "XP]*", 0, ChatType.Shout));
                                     }

                                    if(Session.CharacterInfo.isUsingGreen)
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Becomes poisoned from the green dragon*", 0, ChatType.Shout));
                                        Session.CharacterInfo.isUsingGreen = false;
                                    }

                                       Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));

                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }



                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion


                    #region :shotgun x
                    case "shotgun":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Cooldown / Weapons Enabled
                            try
                            {
                                TimeSpan Span = DateTime.Now - Session.CharacterInfo.Cooldown;

                                if(RPStats.getStat(Session,"level") < 5)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 5 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Span.Seconds < 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down [" + Span.Seconds + "/0]", 0, ChatType.Whisper));
                                    return true;
                                }
                                else if (Session.CharacterInfo.Bullets == 0)
                                {
                                    Session.SendData(UserAlertModernComposer.Compose("Error", "You're out of bullets, head down to the weapon store and purchase some! Room ID: [13]"));
                                    return true;
                                }
                            }
                            catch (Exception e)
                            {
                               // Console.WriteLine(e.ToString());
                            }
                            #endregion
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shotgun <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Instance.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Cannot fight/Missed
                            if (Instance.RoomId == 2 || Instance.RoomId == 9)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot fight here", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 11)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Tries to shotgun " + Username + ", but misses*", 0, ChatType.Shout));
                                return true;
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(8, 19);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires a bullet goes to " + Username + " transporting them to the hospital*", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            TargetSession.CharacterInfo.Health = 100;
                                            TargetSession.CharacterInfo.Timer = 2;
                                            TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                            TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);
                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateBullets(MySqlClient, -1);
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Session.CharacterInfo.Cooldown = DateTime.Now;
                                        }
                                    }
                                    TargetSession.CharacterInfo.Heal(MySqlClient);
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shotguns " + Username + " causing " + HitPoint + " damage*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Target.Id, "[" + TargetSession.CharacterInfo.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateBullets(MySqlClient, -1);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                    
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion

                    #region :sniper x
                    case "sniper":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.sniperCd;
                            if (span.Seconds < RPMisc.getCdFor("sniper"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("sniper") + "]", 0, ChatType.Whisper));
                                return true;
                            }

                              if(RPStats.getStat(Session,"level") < 5)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 5 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(15, 30);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their Pump Shotgun " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there Pump Shotgun causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(10, 25);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Shotgun == 20)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a Sniper Rifle!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires at " + Username + " using their Sniper Rifle causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets shot dead! [+10 points]*", 0, ChatType.Shout));
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);
                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.sniperCd = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires at " + Username + " using their Sniper Rifle causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateEnergy(MySqlClient, -2);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.sniperCd = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }
                            #endregion
                            return true;
                        }
                    #endregion
                    #region :pistol x
                    case "pistol":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                              if(RPStats.getStat(Session,"level") < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                              TimeSpan span = DateTime.Now - Session.CharacterInfo.pistolCd;
                           
                              if (span.Seconds < RPMisc.getCdFor("pistol"))
                              {
                                  Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("pistol") + "]", 0, ChatType.Whisper));
                                  return true;
                              }

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 15);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Pellet == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a G24 Pistol!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets shot dead! [+10 points]*", 0, ChatType.Shout));
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);

                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.pistolCd = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.pistolCd = DateTime.Now;

                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion
                    #region :bat x
                    case "bat":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this room !", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 15);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to hit with their KKA bat but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Knife == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a bat!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOHIT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hit in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their bat at " + Username + "'s head " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets beat to death! [+10 points]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You are now wanted for murder!", 0, ChatType.Whisper));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Health = 100;
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);

                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings their bat at " + Username + "'s head " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion
                    #region :mp5 x
                    case "mp5":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :shoot <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant shoot in this speical room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.mp5Cd;
                            if (span.Seconds < RPMisc.getCdFor("mp5"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("mp5") + "]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                              if(RPStats.getStat(Session,"level") < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;

                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 30);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Glock == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a MP5!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    if (TargetSession.CharacterInfo.Brawl == true)
                                    {

                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.Brawl = false;
                                        Target.Brawl = false;
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their MP5 causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets shot dead! [+10 points]*", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                        TargetSession.CharacterInfo.Health = 100;
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                        TargetSession.CharacterInfo.Timer = 5;
                                        TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                        TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                        Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                        bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                        if (!wired_done)
                                        {
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                            TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                            int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                            decimal rewards = decimal.Parse(reward.ToString());
                                            rewards = Math.Round(rewards, 0);

                                            reward = int.Parse(rewards.ToString());
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                        }
                                    }
                                    Session.CharacterInfo.mp5Cd = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their MP5 causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.mp5Cd = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion
                    #region :stab x
                    case "stab":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :stab <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 5)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away!", 0, ChatType.Whisper));
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                            #endregion
                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                                Random _ss = new Random();
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    int HitPoint = _ss.Next(1, 15);
                                    TheBot.UpdateHealth(TheBot.Health - HitPoint);

                                    if (TheBot.Health < 1)
                                    {
                                        // Kill the bot
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their G24 Pistol " + HitPoint + " damage!*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " has been shot dead!", 0, ChatType.Shout));
                                        if (TheBot.Motto.ToLower().Contains("[boss]"))
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "'s body and finds 120 coins.*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +120);
                                            Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Wins the match of mafia wars.* [+120 points]", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +120);

                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            if (TheBot.Name.ToLower().Contains("green") || TheBot.Name.ToLower().Contains("blue") || TheBot.Name.ToLower().Contains("yellow") || TheBot.Name.ToLower().Contains("red"))
                                            {
                                                foreach (RoomActor GameActor in Instance.Actors)
                                                {
                                                    if (!GameActor.IsBot && GameActor.Figure.ToLower().Contains("sh-725-70.ch-635-70.lg-700-70") || GameActor.Figure.ToLower().Contains("sh-290-70.ch-215-70.lg-275-70") || GameActor.Figure.ToLower().Contains("sh-290-85.ch-215-85.lg-275-85") || GameActor.Figure.ToLower().Contains("sh-725-85.ch-635-85.lg-700-85") || GameActor.Figure.ToLower().Contains("sh-290-82.ch-215-82.lg-275-82") || GameActor.Figure.ToLower().Contains("sh-725-82.ch-635-82.lg-700-82") || GameActor.Figure.ToLower().Contains("sh-290-1321.ch-215-1321.lg-275-1321") || GameActor.Figure.ToLower().Contains("sh-725-1321.ch-635-1321.lg-700-1321"))
                                                    {
                                                        Session GameSession = SessionManager.GetSessionByCharacterId(GameActor.ReferenceId);
                                                        Instance.WiredManager.HandleDeath(GameActor);
                                                        GameActor.MoveToPos(new Vector2(24, 9), false);
                                                        GameSession.CharacterInfo.Heal(MySqlClient);
                                                    }
                                                    if (GameActor.IsBot)
                                                    {
                                                        Bot TheBot1 = BotManager.GetBotDefinition(GameActor.Id);
                                                        TheBot1.UpdateHealth(100);
                                                    }
                                                }
                                            }
                                            TheBot.UpdateHealth(100);
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with there G24 Pistol causing " + HitPoint + " damage!* [+10 points]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        return true;
                                    }
                                }
                            }
                            #endregion
                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 15);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Stab user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to stab but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stab, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stab prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Knife == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have a Knife!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (instanceByRoomId.Info.Description.Contains("NOSTAB"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stab in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health < 1)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stabs " + Username + " with their Knife causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets stabbed dead! [+10 points]*", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    TargetSession.CharacterInfo.Health = 100;
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                    TargetSession.CharacterInfo.Timer = 5;
                                    TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                    TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                    Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                    bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                    if (!wired_done)
                                    {
                                        RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                        int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                        decimal rewards = decimal.Parse(reward.ToString());
                                        rewards = Math.Round(rewards, 0);

                                        reward = int.Parse(rewards.ToString());
                                        Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                        Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                    }
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                }
                                else
                                {
                                    int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                    decimal rewards = decimal.Parse(reward.ToString());
                                    rewards = Math.Round(rewards, 0);
                                    reward = int.Parse(rewards.ToString());
                                    string more = "";
                                    if (reward > 1)
                                    {
                                        more = "s";
                                    }
                                    RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stabs " + Username + " with their Knife causing " + HitPoint + " damage!*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                    Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                    Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 1);

                                    Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                    Session.CharacterInfo.Cooldown = DateTime.Now;
                                    if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                }
                            }

                            #endregion
                            return true;
                        }
                    #endregion


                    #region :aim x

                    case "aim":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (RPStats.getStat(Session, "level") < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :aim  <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            

                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion

                            if (Session.CharacterInfo.Uzi <= 0 && Session.CharacterInfo.Glock <= 0 && Session.CharacterInfo.Pellet <= 0 && Session.CharacterInfo.Shotgun <= 0)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You do not have a gun to aim with?", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.aimingAt == TargetSession.CharacterInfo.Id)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already aiming at this person!", 0, ChatType.Shout));
                                return true;
                            }

                            Session.CharacterInfo.aimingAt = TargetSession.CharacterInfo.Id;
                            TargetSession.CharacterInfo.beingAimed = true;
                            TargetSession.CharacterInfo.aimeee = Session.CharacterInfo.Id;
                            TargetSession.CharacterInfo.StartTimer("aim", TargetSession);
                            
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have aimed your gun at " + TargetSession.CharacterInfo.Username, 0, ChatType.Whisper));

                            return true;
                        }

                    #endregion

                    #region :minigun x
                    case "minigun":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :minigun  <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                              if(RPStats.getStat(Session,"level") < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be level 3 to use this!", 0, ChatType.Whisper));
                                    return true;
                                }

                              TimeSpan span = DateTime.Now - Session.CharacterInfo.minigunCd;
                              if (span.Seconds < RPMisc.getCdFor("minigun"))
                              {
                                  Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/" + RPMisc.getCdFor("minigun") + "]", 0, ChatType.Whisper));
                                  return true;
                              }

                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion

                            #region Hit Bot
                            if (isBot == true)
                            {
                                return true;
                            }
                            #endregion

                            #region Hit User
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(10, 30);
                               
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Shot user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to shoot but feels dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.aimingAt != TargetSession.CharacterInfo.Id)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not aiming at this person! Type :aim <username> to aim", 0, ChatType.Shout));
                                    return true;
                                }

                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Uzi == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need a UZI.", 0, ChatType.Whisper));
                                    return true;
                                }
                                else
                                {

                                    if (instanceByRoomId.Info.Description.Contains("NOSHOOT"))
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot shoot in this room!", 0, ChatType.Whisper));
                                        return true;
                                    }

                                    Target.Health = (Target.Health - HitPoint);


                                    
                                    if (TargetSession.CharacterInfo.Health < 1)
                                    {
                                        if (TargetSession.CharacterInfo.Brawl == true)
                                        {

                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Swings at " + Username + ", causing " + HitPoint + " damage, and kicking them out of brawl!*", 0, ChatType.Shout));
                                            TargetSession.CharacterInfo.Brawl = false;
                                            Target.Brawl = false;
                                            RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                        }
                                        else
                                        {
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their Mini Gun, causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*" + Username + " gets injured and dies! [+10 points]*", 0, ChatType.Shout));
                                            Session.CharacterInfo.UpdateScore(MySqlClient, +10);
                                            Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 2);
                                            Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                            TargetSession.CharacterInfo.UpdateDead(MySqlClient, 1);
                                            TargetSession.CharacterInfo.Health = 100;
                                            TargetSession.CharacterInfo.Timer = 5;
                                            TargetSession.CharacterInfo.StartTimer("hospital", TargetSession);
                                            TargetSession.CharacterInfo.UpdateVar(MySqlClient, "deaths", "1");
                                            Session.CharacterInfo.UpdateVar(MySqlClient, "kills", "1");
                                            bool wired_done = Instance.WiredManager.HandleDeath(Target);
                                            if (!wired_done)
                                            {
                                                RoomHandler.PrepareRoom(TargetSession, 2, null, true);
                                                TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 2);
                                                int reward = (TargetSession.CharacterInfo.CreditsBalance % (_s.Next(1, 10)));
                                                decimal rewards = decimal.Parse(reward.ToString());
                                                rewards = Math.Round(rewards, 0);

                                                reward = int.Parse(rewards.ToString());
                                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +reward);
                                                Session.SendData(CreditsBalanceComposer.Compose(Session.CharacterInfo.CreditsBalance));

                                            }
                                        }
                                        Session.CharacterInfo.minigunCd = DateTime.Now;
                                    }
                                    else
                                    {
                                        int reward = (TargetSession.CharacterInfo.Score % (_s.Next(1, 10)));
                                        decimal rewards = decimal.Parse(reward.ToString());
                                        rewards = Math.Round(rewards, 0);
                                        reward = int.Parse(rewards.ToString());
                                        string more = "";
                                        if (reward > 1)
                                        {
                                            more = "s";
                                        }
                                        RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Shoots " + Username + " with their Mini Gun, causing " + HitPoint + " damage! [-2e]*", 0, ChatType.Shout));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "[" + Target.Health + "/100]", 0, ChatType.Shout));
                                        Session.CharacterInfo.UpdateScore(MySqlClient, +reward);
                                        Session.CharacterInfo.UpdateEnergy(MySqlClient, -2);

                                        Session.SendData(AchievementScoreUpdateComposer.Compose(Session.CharacterInfo.Score));
                                        Session.CharacterInfo.minigunCd = DateTime.Now;
                                        if (RPMisc.hasBlueDrag(TargetSession))
                                    {
                                        int usedrag = _s.Next(RPMisc.blueDraguseMin, RPMisc.blueDraguseMax);
                                        if (usedrag == 2 || Session.CharacterInfo.Username.Contains("Ying"))
                                        {
                                            TargetSession.CharacterInfo.isUsingSky = true;
                                            TargetSession.CharacterInfo.StartTimer("skydrag", TargetSession);
                                            Instance.BroadcastMessage(RoomChatComposer.Compose(TargetActor.Id, "*Activates their healing dragon*", 0, ChatType.Shout));
                                            Actor.ApplyEffect(8);
                                        }
                                    }
                                    }
                                }

                            #endregion
                                return true;
                            }
                        }
                    #endregion
                    #region :rob x
                    case "rob":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :rob <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOROB") || (13 == Instance.RoomId || 21 == Instance.RoomId || 61 == Instance.RoomId || 82 == Instance.RoomId || 2 == Instance.RoomId || 9 == Instance.RoomId))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant rob in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Trys to rob " + TargetSession.CharacterInfo.Username + " but is too far away!", 0, ChatType.Shout));
                                return true;
                            }
                            #endregion

                            #region Rob User
                            Random _s = new Random();
                            int amount = RandomGenerator.GetNext(3, 16);
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 10);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Energy < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Attempts to rob someone but feels too dizzy!*", 0, ChatType.Shout));
                                    return true;
                                }
                                if (Session.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rob your inmates.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rob, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rob prisoners.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Wanted == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't rob if your wanted :(.", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Phone == 0 || TargetSession.CharacterInfo.CreditsBalance < 76)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Attempts to rob " + Username + " but they don't have any money", 0, ChatType.Shout));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.CreditsBalance > amount)
                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Holds up " + Username + " with a pistol*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*takes their money and phone from them*", 0, ChatType.Shout));
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for robbery!", 0, ChatType.Whisper));
                                    Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +76);
                                    TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, 76);
                                    Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                }
                                else
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*This user doesn't have " + amount + ", so you couldn't take it off them!*", 0, ChatType.Whisper));
                                }

                            #endregion
                                return true;
                            }
                        }
                    #endregion
                    #region :text x <msg>
                    case "text":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :text x <msg>", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.Phone == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, But you currently do not have a phone so you cannot use the :text feature, go to roomid [5] and buy one!", 0, ChatType.Whisper));
                                    return true;
                                }


                                if ((Session.CharacterInfo.Jailed == 1) || (Session.CharacterInfo.Dead == 1))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "How can you ring people when your arrested/dead?", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Session.CharacterInfo.ActivityPointsBalance < 10)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are out of credit - go to roomid [5] and say :buycredit!", 0, ChatType.Whisper));
                                    return true;
                                }
                                Session session13 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (instanceByRoomId != null)
                                {
                                    instanceByRoomId.GetActorByReferenceId(session13.CharacterId, RoomActorType.UserCharacter);
                                }
                                if (instanceByRoomId != null)
                                {
                                    instanceByRoomId.GetActorByReferenceId(session13.CharacterId, RoomActorType.UserCharacter);
                                }

                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot recieve a message.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;


                                {



                                    if (Session.CharacterInfo.Phone == 1)
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my iPhone and sends a message to " + Username + "*", 0, ChatType.Shout));
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, " That call just cost you 10 phone credit", 0, ChatType.Whisper));
                                    string msg = Input.Replace(Bits[0].ToLower(), "");
                                    TargetSession.SendData(UserAlertModernComposer.Compose("Text Message Recieved", msg + "\n\nFrom: " + Session.CharacterInfo.Username));
                                    SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();

                                    Session.CharacterInfo.UpdateActivityPointsBalance(MySqlClient, -10);


                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :corpinfo
                    case "corpinfo":
                        {
                            int id = Convert.ToInt32(Bits[1].Trim());
                            string display = "";

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                DataRow Row = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + id + "'");
                                if (Row != null)
                                {
                                    display += "~~General Information of " + Row["name"].ToString() + " Corp\n~~";

                                    display += "Corp name: " + Row["name"].ToString() + "\n";
                                    display += "Owner: " + Row["ownerid"] + "\n";
                                    display += "Main Room: " + Row["roomid"] + "\n";
                                    display += "Bank Balance: " + Row["bank"] + "\n";
                                    display += "Founder: " + Row["founder"] + "\n";
                                    display += "Open spots: " + Row["spots"] + "\n\n";

                                    DataTable Tbl = MySqlClient.ExecuteQueryTable("SELECT * FROM jobranks WHERE jobid = '" + id + "'");
                                    if (Tbl != null)
                                    {
                                        foreach (DataRow Rank in Tbl.Rows)
                                        {
                                            display += "~~(Rank) " + Rank["name"] + "~~\n";
                                            display += "Rank id: " + Rank["id"] + "\n";
                                            display += "Type: " + Rank["rank"] + "\n";
                                            display += "Pay time: " + Rank["paytime"] + "\n";
                                            display += "Pay: " + Rank["pay"] + "\n\n";
                                        }
                                    }

                                    DataTable Tbl2 = MySqlClient.ExecuteQueryTable("SELECT * FROM users WHERE groupid = '" + id + "' ORDER BY `jobrank` DESC");
                                    display += "~~Employees~~\n";
                                    foreach (DataRow User in Tbl2.Rows)
                                    {
                                        display += "[" + User["id"] + "] [Rank: " + RPMisc.getCorpRankInfo("name", Convert.ToInt32(User["groupid"]), Convert.ToInt32(User["jobrank"])) + "]" + User["username"] + "\n";
                                    }
                                }
                            }
                            Session.SendData(MessageOfTheDayComposer.Compose(display));
                            return true;
                        }
                    #endregion
                    #region :roomid
                    case "roomid":
                        {

                            int corpid = RPStats.getUStat(Session, "groupid");
                            int rankid = RPStats.getUStat(Session, "jobrank");

                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're in ROOMID: [" + Instance.RoomId + "]!", 0, ChatType.Whisper));
                           return true;
                        }
                    #endregion
                    #region :stats
                    case "stats":
                        {
                            string stats = "";

                            stats += "\n-------------------\n";
                            stats += " Character\n";

                            stats += "Id: " + Session.CharacterInfo.Id + "\n";
                            stats += "Health: " + Session.CharacterInfo.Health + "/100\n";
                            stats += "Energy: " + Session.CharacterInfo.Energy + "/100\n";
                            stats += "XP: " + RPStats.getStat(Session,"cur_xp") + "/" + RPStats.getStat(Session,"need_xp") + "\n";
                            stats += "Level/Strength: " + RPStats.getStat(Session, "level") + "\n";

                            stats += "-------------------\n";
                            stats += " Misc\n";

                            stats += "Game Points: " + RPStats.getUStat(Session, "game_pts") + "\n";
                            stats += "Money: $" + Session.CharacterInfo.CreditsBalance + "\n";
                            stats += "Bank Balanace: $" + Session.CharacterInfo.Bank + "\n";
                            
                            stats += "-------------------\n";
                            stats += " Inventory\n";

                            stats += "Weed: " + Session.CharacterInfo.Weed + "\n";
                            stats += "Bullets: " +  Session.CharacterInfo.Bullets + "\n";
                            stats += "MP5: " + Session.CharacterInfo.Glock + "\n";
                            stats += "Knife: " + Session.CharacterInfo.Knife + "\n";
                            stats += "Shotgun: " + Session.CharacterInfo.Shotgun + "\n";
                            stats += "Pistol: " + Session.CharacterInfo.Pellet + "\n";

                            stats += "-------------------\n";
                            stats += " Timers\n";

                            stats += "Wanted: " + Session.CharacterInfo.Wanted + "\n";
                            stats += "Learning: " + Session.CharacterInfo.Learning + "\n";
                            stats += "Dead: " + Session.CharacterInfo.Dead + "\n";
                            stats += "Jailed: " + Session.CharacterInfo.Jailed + "\n";


                            stats += "-------------------\n";
                            stats += " Career\n";

                            int corpid = RPStats.getUStat(Session, "groupid");
                            int rankid = RPStats.getUStat(Session, "jobrank");

                           /* if (corpid != 1)
                            {
                                stats += "Works for " + RPMisc.getCorpInfo(corpid, "name").ToString();
                                stats += "as a " + RPMisc.getCorpRankInfo(corpid, rankid, "name").ToString() + "\n";
                            }
*/

                            stats += "Jobid: " + Session.CharacterInfo.GroupID + "\n";
                            stats += "Jobrankid: " + RPStats.getUStat(Session,"jobrank") + "\n";




                            Session.SendData(MessageOfTheDayComposer.Compose("Stats for " + Session.CharacterInfo.Username  + stats));
                            return true;
                        }
                    #endregion
                    #region :buycigs
                    case "buycigs":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }




                            if (13 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Buys 1 pack of Marlboro ultra's with 6 smokes [-10c]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateTokens(MySqlClient, +6);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 13 to buy Cigarettes", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :smoke
                    case "smoke":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            if (Session.CharacterInfo.Tokens > 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out my pack of Marlboro ultra's*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs 1 cigarette from the pack and smokes it!* [-10e]", 0, ChatType.Shout));

                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateEnergy(MySqlClient, -10);
                                Session.CharacterInfo.UpdateTokens(MySqlClient, -1);


                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke cigarettes in jail.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke cigarettes while in the hospital.", 0, ChatType.Whisper));
                                return true;
                            }



                            else


                                if (Session.CharacterInfo.Tokens > 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don`t have enough cigarettes to smoke go to room 13 and buy some more!", 0, ChatType.Whisper));
                                    return true;
                                }

                            return true;
                        }

                    #endregion
                    #region :laws
                    case "laws":
                        Session.SendData(MessageOfTheDayComposer.Compose("State Laws\n\n Laws Will be updated as the game goes on. Keep checking back"));
                        return true;
                    #endregion
                    #region :wl
                    case "wl":
                        using (SqlDatabaseClient client25 = SqlDatabaseManager.GetClient())
                        {
                            StringBuilder builder3 = new StringBuilder();
                            builder3.AppendLine("------------------------\nWanted Criminals:\n------------------------");
                            foreach (DataRow row8 in client25.ExecuteQueryTable("SELECT * FROM users WHERE wanted = 1").Rows)
                            {
                                builder3.AppendLine(((string)row8["username"]));
                            }
                            Session.SendData(MessageOfTheDayComposer.Compose(builder3.ToString()));
                        }
                        return true;
                    #endregion
                    #region :hotrooms
                    case "hotrooms":
                        using (SqlDatabaseClient client25 = SqlDatabaseManager.GetClient())
                        {
                            string builder = "";
                            builder += "------------------------\nCurrent Active Rooms:\n------------------------";
                            foreach (DataRow row8 in client25.ExecuteQueryTable("SELECT id,name,current_users FROM rooms WHERE current_users > '0' ORDER BY current_users DESC LIMIT 25").Rows)
                            {
                                builder += "[" + row8["id"] + "] " + row8["name"] + " - Users in room: " + row8["current_users"] + "\n";
                            }
                            Session.SendData(MessageOfTheDayComposer.Compose(builder));
                        }
                        return true;
                    #endregion
                    #region :giveitem x
                    case "giveitem":
                        session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                        if (instanceByRoomId != null)
                        {
                            instanceByRoomId.GetActorByReferenceId(session12.CharacterId, RoomActorType.UserCharacter);
                        }
                        RoomActor actor7 = (instanceByRoomId == null) ? null : instanceByRoomId.GetActorByReferenceId(session12.CharacterId, RoomActorType.UserCharacter);
                        string str25 = session12.CharacterInfo.Username;
                        if (((session12 == null) || !session12.InRoom) || (Session.AbsoluteRoomId != session12.AbsoluteRoomId))
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + str25 + " in this room.", 0, ChatType.Whisper));
                            return true;
                        }



                        if (session12.CharacterId == Session.CharacterId)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant give yourself a drink?", 0, ChatType.Whisper));
                            return true;
                        }
                        actor7.CarryItem(Actor.CarryItemId, true);
                        Actor.CarryItem(0, true);
                        instanceByRoomId.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hands the item to " + str25 + "*", 0, ChatType.Shout), false);
                        return true;
                    #endregion
                    #region :setatm <amount>
                    case "setatm":
                        {

                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :setatm <amount>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            int chosenamount = Int32.Parse(UserInputFilter.FilterString(Bits[1].Trim()));
                            if(chosenamount <= 0)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not allowed to set negative amounts..", 0, ChatType.Whisper));
                                return true;
                            }

                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your ATM withdrawel amount has been set to " + chosenamount + "c.", 0, ChatType.Whisper));
                            Session.CharacterInfo.UpdateATMamount(chosenamount);
                            return true;
                        }

                    #endregion
                    #region :hug x
                    case "hug":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hug people while serving time.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hug people if your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hugs " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :swear x
                    case "swear":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot let your anger out on your inmates!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot let your anger out if your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Raises my middle finger and points it in " + TargetSession.CharacterInfo.Username + "'s direction*", 0, ChatType.Shout));
                            TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "" + Session.CharacterInfo.Username + " just swore at you!", 0, ChatType.Whisper));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :hi5 x
                    case "hi5":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hi5 while in jail, this is a punishment.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot hi5 while your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*High 5's " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :spit x
                    case "spit":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot spit!, your in here for a reason.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot spit!, you were killed for a reason!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Spit's on " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :poke x
                    case "poke":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot poke people in jail.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot poke people while your dead!", 0, ChatType.Whisper));
                                return true;

                            }
                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Poke's " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :slap x
                    case "slap":
                        {

                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot slap your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot slap while you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }
                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Slaps " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));

                            Session.CharacterInfo.Cooldown = DateTime.Now;
                            return true;
                        }

                    #endregion
                    #region :kiss x
                    case "kiss":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot kiss your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot kiss while your dead.", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Kisses " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));
                            HandleKiss(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :snog x
                    case "snog":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot snog your inmates!", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot snog if your dead!", 0, ChatType.Whisper));
                                return true;
                            }
                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Snogs " + TargetSession.CharacterInfo.Username + "*", 0, ChatType.Shout));
                            HandleSnog(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :rape x
                    case "rape":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rape your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot rape you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls down " + TargetSession.CharacterInfo.Username + "'s pants and gently starts to F**K Them*", 0, ChatType.Shout));
                            HandleRape(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :sex x
                    case "sex":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }


                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot have sex with your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOSEX"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't start sex in this room.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot have sex if you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                            string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls down my pants, takes out my dick and puts it on " + TargetSession.CharacterInfo.Username + " and starts to do a blowjob*", 0, ChatType.Shout));
                            HandleRape(12000, Session, Actor, TargetActor2);
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :marry x
                    case "marry":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 5)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/5]", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Instance.Info.Description.Contains("CHURCH") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in a church to wed!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username3 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession3 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username3));
                            RoomActor Target3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            RoomActor TargetActor3 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession3.CharacterId));
                            if (Distance.Calculate(Actor.Position.GetVector2(), Target3.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is to far away, try getting closer", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot marry your inmates.", 0, ChatType.Whisper));
                                return true;
                            }

                           

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot marry anyone while you're dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPMisc.isMarried(Session))
                            {
                                int marriedto = RPStats.getStat(Session,"married_to");
                                Session Married = SessionManager.GetSessionByCharacterId(Convert.ToUInt32(marriedto));
                                if (Married != null)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already married to " + Married.CharacterInfo.Username, 0, ChatType.Whisper));
                                }
                                else
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already married! ", 0, ChatType.Whisper));
                                }
                                return true;
                            }


                            string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                            RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                            RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));

                            if (TargetSession2.CharacterInfo.marryReq == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user has received a marriage request already, wait til he/she accepts/denies it.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (RPMisc.isMarried(TargetSession2))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is already married!", 0, ChatType.Whisper));
                                return true;
                            }

                            
                            if (Actor.Name == Username2)
                            {
                                return true;
                            }

                             string target = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                            RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                            

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Asks for " + TargetSession.CharacterInfo.Username + "'s hand in marriage*", 0, ChatType.Shout));
                            TargetSession.CharacterInfo.marryReq = true;
                            TargetSession.CharacterInfo.marryReqer = Session.CharacterInfo.Id;
                            TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, Session.CharacterInfo.Username + " has asked for your hand in marriage. Type #accept to accept or #deny to deny.", 0, ChatType.Whisper));
                            Session.CharacterInfo.Cooldown = DateTime.Now;
                        }


                        return true;
                    #endregion
                    #region :robbank
                    case "robbank":
                        {

                            if (Session.CharacterInfo.Tokens == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have robbed this bank already, come back in a while!", 0, ChatType.Whisper));
                                return true;
                            }


                            if (25 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Puts on mask and demands for cash*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Starts robbing the bank*", 0, ChatType.Shout));
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are now wanted for bank robbery!", 0, ChatType.Whisper));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateWantedLVL(MySqlClient, 4);
                                Session.CharacterInfo.UpdateTokens(MySqlClient, 1);
                                Session.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Please wait [10] seconds before you get your robbery reward.", 0, ChatType.Whisper));
                                System.Threading.Thread.Sleep(10000);
                                int newcoins = Session.CharacterInfo.CreditsBalance + 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, +250);
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                int policeMembersOnline = 0;

                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));

                                    if ((TargetSession != null || TargetSession.InRoom) && (TargetSession.CharacterInfo.GroupID == 3) && (TargetSession.CharacterInfo.GroupID == 6) && (TargetSession.CharacterInfo.Working == 1))
                                    {
                                        TargetSession.SendData(NotificationMessageComposer.Compose(Session.CharacterInfo.Username + " had robbed the bank in [25]."));
                                        policeMembersOnline++;
                                    }
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gains [$250] from the robbery*", 0, ChatType.Shout));
                            }

                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can only rob the bank in room 25!", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region #accept
                    case "accept":
                        {
                            if (Session.CharacterInfo.marryReq && Session.CharacterInfo.marryReqer != 0)
                            {
                                Session TargetSession = SessionManager.GetSessionByCharacterId(Session.CharacterInfo.marryReqer);
                                RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);

                                RPMisc.Marry(TargetSession,Session);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "Yes yes yes, baby! I want to marry you!", 0, ChatType.Shout));
                                return true;
                            }

                            if (Session.CharacterInfo.Offerpgun == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 450)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferpgun(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 450;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -450);
                                Session.CharacterInfo.UpdatePellet(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a G24 Pistol", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Offersgun == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOffersgun(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 1000;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -1000);
                                Session.CharacterInfo.UpdateShotgun(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a Sniper Rifle", 0, ChatType.Whisper));

                            }
                            if (Session.CharacterInfo.Offerglock == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferglock(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferglock(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 1500;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -1500);
                                Session.CharacterInfo.UpdateGlock(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a MP5", 0, ChatType.Whisper));

                            }
                            if (Session.CharacterInfo.Offersgun == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOffersgun(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -250);
                                Session.CharacterInfo.UpdateKnife(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a Bat", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.Offerweed == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 10)
                                {
                                    Session.CharacterInfo.UpdateOfferweed(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferweed(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                                Session.CharacterInfo.UpdateWeed(MySqlClient, +5);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived 5g of Weed [-$10]", 0, ChatType.Whisper));
                            }
                            if (Session.CharacterInfo.OfferKeycard == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 1000)
                                {
                                    Session.CharacterInfo.UpdateOfferpgun(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferKeycard(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                                Session.CharacterInfo.UpdateKeycard(1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived a Keycard [-$10]", 0, ChatType.Whisper));

                            }
                            if (Session.CharacterInfo.Offerknife == 1)
                            {
                                if (Session.CharacterInfo.CreditsBalance < 250)
                                {
                                    Session.CharacterInfo.UpdateOfferknife(0);
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry but you cannot afford this so the offer was removed.", 0, ChatType.Whisper));
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferknife(0);
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newcoins = Session.CharacterInfo.CreditsBalance - 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -250);
                                Session.CharacterInfo.UpdateKnife(MySqlClient, 1);
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have recived Knife [-$250]", 0, ChatType.Whisper));
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, but no one is offering you anything.", 0, ChatType.Whisper));
                            }


                            return true;

                        }
                    #endregion
                    #region #deny
                    case "deny":
                        {

                            if (Session.CharacterInfo.marryReq)
                            {
                                Session.CharacterInfo.marryReq = false;
                                Session.CharacterInfo.marryReqer = 0;
                            }

                            if (Session.CharacterInfo.Offerweed == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferweed(0);

                            }
                            if (Session.CharacterInfo.Offersgun == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOffersgun(0);

                            }
                            if (Session.CharacterInfo.Offerpgun == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferpgun(0);

                            }
                            if (Session.CharacterInfo.OfferKeycard == 1)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Refuses the offer*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateOfferKeycard(0);

                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, But no one is offering you anything.", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }


                    #endregion
                    #region :smokeweed
                    case "smokeweed":
                        {

                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            if (Session.CharacterInfo.Weed > 5)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Smokes 5g of Weed [-20e]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateEnergy(MySqlClient, -20);
                                Session.CharacterInfo.UpdateWeed(MySqlClient, -5);


                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke weed in jail.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, you cannot smoke weed in the hospital.", 0, ChatType.Whisper));
                                return true;
                            }

                            else

                                if (Session.CharacterInfo.Weed == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You don't have enough weed to smoke go to room 15 and buy some more!", 0, ChatType.Whisper));
                                    return true;
                                }

                            return true;
                        }

                    #endregion
                    #region :startwork
                    case "startwork":

                        #region cw
                        //games
                        if (Session.CharacterInfo.inCw == true)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                            return true;
                        }
                        #endregion

                        if (Session.CharacterInfo.Energy < 5)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're don't have enough energy to work grab a snack and refresh yourself!", 0, ChatType.Whisper));
                            return true;
                        }

                        if (Session.CharacterInfo.SentHome == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant work, Your manager/supervisor has sent you home!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Working == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're already working!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant work, You're dead!", 0, ChatType.Whisper));
                            return true;
                        }

                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant work, You're jailed!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            MySqlClient.SetParameter("groupid", Session.CharacterInfo.GroupID);
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = @groupid");
                            MySqlClient.SetParameter("userid", Session.CharacterInfo.Id);
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = @userid");
                            MySqlClient.SetParameter("groupid", Session.CharacterInfo.GroupID);
                            MySqlClient.SetParameter("rankid", Row2["jobrank"]);
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = @groupid AND rankid = @rankid");
                            int room_id = (int)Row1["roomid"];
                            string jobname = (string)Row1["name"] + " " + (string)Row3["name"];
                            string jobfig = (string)Row3["figure_data_" + Session.CharacterInfo.Gender.ToString()];
                            int paytime = (int)Row3["paytime"];

                            if (room_id == Instance.RoomId || room_id == 0)
                            {
                                string figure_update = FigToUniFig(Session.CharacterInfo.Figure) + jobfig;
                                if (jobfig == "")
                                {
                                    figure_update = Session.CharacterInfo.Figure;
                                }
                                if (Session.CharacterInfo.Timer < 1 || Session.CharacterInfo.Timer > paytime)
                                {
                                    Session.CharacterInfo.Timer = paytime;
                                }
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, figure_update, Session.CharacterInfo.Gender, "[WORKING] " + jobname, Session.CharacterInfo.Score));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Starts to work*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateLearning(MySqlClient, 0);
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 1);
                                Session.CharacterInfo.StartTimer("work", Session);

                            }
                        }
                        return true;
                    #endregion
                    #region :buytaxi
                    case "buytaxi":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 5000)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Intelligence == 750)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have a free taxi.", 0, ChatType.Whisper));
                                return true;
                            }


                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Buys a free taxi [-$5000]", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateIntelligence(MySqlClient, 750);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 5000;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -50);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to buy free taxi", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :buyintel
                    case "buyintel":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 2000)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Intelligence == 50)
                                if (Session.CharacterInfo.Intelligence == 100)
                                    if (Session.CharacterInfo.Intelligence == 150)
                                        if (Session.CharacterInfo.Intelligence == 200)
                                            if (Session.CharacterInfo.Intelligence == 250)
                                                if (Session.CharacterInfo.Intelligence == 300)
                                                    if (Session.CharacterInfo.Intelligence == 350)
                                                        if (Session.CharacterInfo.Intelligence == 400)
                                                            if (Session.CharacterInfo.Intelligence == 450)
                                                                if (Session.CharacterInfo.Intelligence == 500)
                                                                    if (Session.CharacterInfo.Intelligence == 550)
                                                                        if (Session.CharacterInfo.Intelligence == 600)
                                                                            if (Session.CharacterInfo.Intelligence == 650)
                                                                                if (Session.CharacterInfo.Intelligence == 700)
                                                                                    if (Session.CharacterInfo.Intelligence == 750)
                                                                                        if (Session.CharacterInfo.Intelligence == 800)
                                                                                            if (Session.CharacterInfo.Intelligence == 1000)
                                                                                            {
                                                                                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have 50 Intelligence.", 0, ChatType.Whisper));
                                                                                                return true;
                                                                                            }


                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Opens their wallet, and buys 50 Intel [-$2000]", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateIntelligence(MySqlClient, 50);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 2000;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -2000);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to buy Intelligence", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :buycredit
                    case "buycredit":
                        {
                            if (Session.CharacterInfo.CreditsBalance < 10)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford this item.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Phone == 1)
                            {



                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Unlocks their phone and buys 100 texts for $10 [-$10 + 100 phone credit]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                int newpx = Session.CharacterInfo.ActivityPointsBalance + 100;
                                Session.SendData(ActivityPointsBalanceComposer.Compose(newpx, 100));
                                Session.CharacterInfo.UpdateActivityPointsBalance(MySqlClient, +100);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 10;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -10);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must have a phone to buy credit!", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :buyinsurance
                    case "buyinsurance":
                        {
                            if (Session.CharacterInfo.Intelligence < 50)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need 50 intelligence to buy car insurance!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.CreditsBalance < 250)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford to buy your insruance.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Insurance == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have car insurance!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Purchases my car insurance [-$250]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateInsurance(MySqlClient, 1);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 250;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -250);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to purchase your car insurance", 0, ChatType.Whisper));
                                return true;
                            }

                            return true;
                        }


                    #endregion
                    #region :buylicense
                    case "buylicense":
                        {
                            if (Session.CharacterInfo.Intelligence < 50)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You need 50 intelligence to buy a car license!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.CreditsBalance < 30)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot afford to buy your license.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Licence == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You already have a car license!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (144 == Instance.RoomId)
                            {

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Purchases my own car license [-$30]*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateLicence(MySqlClient, 1);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 30;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -30);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 144 to purchase your license", 0, ChatType.Whisper));
                                return true;
                            }

                            return true;
                        }


                    #endregion
                    #region :sellmp5 x
                    case "sellmp5":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellMP5 <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell MP5
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling MP5",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 1500)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a MP5 from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$1500]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferglock(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you MP5 for [$1500] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1500;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerglock == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferglock(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :sellpistol x
                    case "sellpistol":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellpistol <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell Pistol
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Pistol",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 1000)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a G24 Pistol from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$1000]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferpgun(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you a G24 Pistol for [$1000] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1500;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerpgun == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferpgun(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :buybullets
                    case "buybullets":
                        {




                            if (13 == Instance.RoomId)
                            {

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Loads there Guns with 75 more bullets [-50c]", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateBullets(MySqlClient, +75);
                                int newcoins = Session.CharacterInfo.CreditsBalance - 50;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -50);
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You must be in room ID: 13 to buy bullets", 0, ChatType.Whisper));
                                return true;
                            }
                            return true;
                        }

                    #endregion
                    #region :sellsniper x
                    case "sellsniper":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellshotgun <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell Sniper
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Sniper",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 1000)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell guns to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Shotgun == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user already has a sniper rifle.", 0, ChatType.Whisper));
                                        return true;

                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a Sniper Rifle from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$1000]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOffersgun(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you a Sniper Rifle for [$1000] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1000;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerpgun == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOffersgun(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :sellkeycard x
                    case "sellkeycard":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellkeycard <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Missed
                            if (Distance.Calculate(Actor.Position.GetVector2(), PositionNow) > 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Sell Keycard
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Keycard",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 10)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell keycards to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell keycards to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Keycard == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user already has a keycard.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a Keycard from behinde the desk and offers it to " + TargetSession.CharacterInfo.Username + " for [$10]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferKeycard(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An Ibis hotel worker is offering you a keycard for [$10] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1000;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.OfferKeycard == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferKeycard(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :sellknife x
                    case "sellknife":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sellknife <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion
                            #region Sell Knife
                            Random _s = new Random();
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {

                                if (Session.CharacterInfo.GroupID == 7 && Session.CharacterInfo.Working == 1)
                                {


                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Selling Knife",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    if (TargetSession.CharacterInfo.CreditsBalance < 250)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user does not have enough money.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Jailed == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell knifes to inmates.", 0, ChatType.Whisper));
                                        return true;
                                    }
                                    if (TargetSession.CharacterInfo.Dead == 1)
                                    {
                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot sell knifes to dead people.", 0, ChatType.Whisper));
                                        return true;
                                    }



                                    else
                                    {



                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs a Knife from under the counter and offers it to " + TargetSession.CharacterInfo.Username + " for [$250]*", 0, ChatType.Shout));
                                        TargetSession.CharacterInfo.UpdateOfferknife(1);
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "An ammunition store worker is offering you a Knife for [$250] this offer will expire in 15 seconds...", 0, ChatType.Whisper));
                                        TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "Say #accept to accept the offer or #deny if you wish to deny it.", 0, ChatType.Whisper));
                                        int time = 15;
                                        time = time * 1500;
                                        System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
                                        dispatcherTimer.Interval = time;
                                        dispatcherTimer.Elapsed += delegate
                                        {
                                            dispatcherTimer.Dispose();
                                            dispatcherTimer.Stop();
                                            if (TargetSession.CharacterInfo.Offerknife == 1)
                                            {
                                                TargetSession.CharacterInfo.UpdateOfferknife(0);
                                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "The offer expired.", 0, ChatType.Whisper));
                                            }
                                        };
                                        dispatcherTimer.Start();
                                    }


                            #endregion
                                    return true;
                                }
                            }
                            return true;
                        }
                    #endregion
                    #region :stopwork
                    case "stopwork":
                        if (Session.CharacterInfo.Working != 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant stop work, You're are not working!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant stop work, You're are dead!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant stop work, You're are in jail!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseClient client22 = SqlDatabaseManager.GetClient())
                        {
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, Actor.Figure, Session.CharacterInfo.Gender, Session.CharacterInfo.Motto, Session.CharacterInfo.Score), false);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stops working*", 0, ChatType.Shout), false);
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                Session.CharacterInfo.isWorking = false;
                            }
                        }
                        return true;
                    #endregion
                    #region :deposit <amount>
                    case "deposit":
                        {
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :deposit <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[1].Trim()));

                            if (amount <= 0)
                            {
                                return false;
                            }

                            if (amount > Session.CharacterInfo.CreditsBalance)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Error - You dont have " + amount + " coins!", 0, ChatType.Whisper));
                                return true;
                            }

                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int newamount = Session.CharacterInfo.CreditsBalance - amount;
                                int newbank = Session.CharacterInfo.Bank + amount;
                                Session.CharacterInfo.UpdateBank(MySqlClient, +amount);
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -amount);
                                Session.SendData(CreditsBalanceComposer.Compose(newamount));
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Deposits " + amount + " dollars into their bank account*", 0, ChatType.Shout));
                            return true;
                        }
                    #endregion
                    #region :give x <amount>
                    case "give":
                        {


                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }




                            if (Bits.Length < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :give <username> <amount>", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot give coins to your inmates.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot give coins while your dead!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is too far away, try getting closer!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (amount < 1 || amount > Session.CharacterInfo.CreditsBalance)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Error - You dont have enough coins to give away!", 0, ChatType.Whisper));
                                return true;
                            }
                            Username = TargetSession.CharacterInfo.Username;
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int user1 = 0;
                                user1 = Session.CharacterInfo.CreditsBalance - amount;
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -amount);
                                Session.SendData(CreditsBalanceComposer.Compose(user1));

                                int user2 = 0;
                                user2 = TargetSession.CharacterInfo.CreditsBalance + amount;
                                TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, amount);
                                TargetSession.SendData(CreditsBalanceComposer.Compose(user2));
                            }
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hands " + amount + " dollars to " + Username + "*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #region :balance
                    case "balance":
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Checks my bank balance on my iPhone*", 0, ChatType.Shout));
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have " + Session.CharacterInfo.Bank + " dollars in your bank!", 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :healdrag
                    case "healdrag":
                        {
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.lastUsedSky;

                            if (!RPMisc.hasBlueDrag(Session) && Session.CharacterInfo.Username.Contains("Ying") == false)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You do not have a sky dragon, you can purchase one from VIP store.", 0, ChatType.Whisper));
                                return true;       
                            }

                            if (span.Seconds < 500)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your sky dragon is currently cooling down!", 0, ChatType.Whisper));
                                return true;
                            }
                            Random _s = new Random();
                            int rand = _s.Next(1, 10);

                            if (rand != 5)
                            {
                                Session.CharacterInfo.Health -= 5;
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Attempts to activate their healing dragon but fails. [-5H]*", 0, ChatType.Shout));
                                Session.CharacterInfo.lastUsedSky = DateTime.Now;
                                return true;
                            }
                            else
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Successfully activates their healing dragon*", 0, ChatType.Shout));
                                Session.CharacterInfo.Timer = 5;
                                Session.CharacterInfo.isUsingSky = true;
                                Session.CharacterInfo.StartTimer("skydrag", Session);
                                Actor.ApplyEffect(8);
                            }

                            return true;
                        }
                    #endregion
                    #region :taxi <roomid>
                    case "taxi":
                        #region cw
                        //games
                        if (Session.CharacterInfo.inCw == true)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                            return true;
                        }
                        #endregion

                        if (Bits.Length < 2)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :taxi <room id>", 0, ChatType.Whisper));
                            return true;
                        }
                        if (instanceByRoomId.Info.Description.Contains("NOTAXI"))
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "This is a no taxi zone, please go somewhere where you can taxi!", 0, ChatType.Whisper));
                            return true;
                        }
                        uint roomid = uint.Parse(UserInputFilter.FilterString(Bits[1].Trim().ToString()));

                        if (roomid == Session.CurrentRoomId)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're already in that room!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot taxi whilst jailed .", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot taxi whilst dead.", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Gathering == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot taxi whilst gathering/playing with an item.", 0, ChatType.Whisper));
                            return true;
                        }
                        bool loaded = false;
                        if (!RoomManager.InstanceIsLoadedForRoom(roomid))
                        {
                            loaded = RoomManager.TryLoadRoomInstance(roomid);
                        }
                        else
                        {
                            loaded = true;
                        }
                        if (loaded)
                        {
                            RoomInstance GoingTo = RoomManager.GetInstanceByRoomId(roomid);

                            if (GoingTo.Info.Description.Contains("NOTALLOWTAXI"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't taxi here, sorry!", 0, ChatType.Whisper));
                                return true;
                            }

                            if (GoingTo.Info.Description.Contains("VIPONLY"))
                            {
                                int vipactive = RPStats.getStat(Session,"vip_active");
                                if (vipactive == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "The requested place is VIP only!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            
                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 3)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Squad car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                Actor.ApplyEffect(19);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 7)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in JEEP MB and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 6)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Government Jet with their Special Forces and flies to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 4)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Urgent Care Ambulance and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Username == "Logan" || Session.CharacterInfo.Username == "Dr.Avery")
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gets in their Government Car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Username == "Jonty")
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gets in their Government Car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Username == "Ying-Pie")
                            {
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Working == 1 && Session.CharacterInfo.GroupID == 6)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops in Presidential State Car and drives to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }

                            if (Session.CharacterInfo.Intelligence >= 750)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hops on their Golden stripped Bugatti and hovers to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid, true);
                                return true;
                            }
                            else
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls a taxi to " + GoingTo.Info.Name + " [" + roomid + "]*", 0, ChatType.Shout));
                                HandleTaxi(Session, Actor, roomid);
                                return true;
                            }
                        }
                        else
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Couldn't find room, ID: " + roomid, 0, ChatType.Whisper));
                            return true;
                        }
                    #endregion
                    #region :quitjob
                    case "quitjob":
                        if (Session.CharacterInfo.GroupID == 2)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have no job, Therefore you cannot quit your job.", 0, ChatType.Whisper));
                            return true;
                        }
                        else
                        {
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                MySqlClient.SetParameter("userid", Session.CharacterId);
                                MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = '1' WHERE id = @userid LIMIT 1");
                                MySqlClient.SetParameter("userid", Session.CharacterId);
                                MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = '2' WHERE id = @userid LIMIT 1");
                                Session.CharacterInfo.UpdateGroupID(MySqlClient, 2);
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, Session.CharacterInfo.Figure, Session.CharacterInfo.Gender, Session.CharacterInfo.Motto, Session.CharacterInfo.Score));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Quits their job*", 0, ChatType.Shout));
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You no longer have a job!", 0, ChatType.Whisper));
                            }
                            return true;
                        }
                    #endregion
                    #region :dispose
                    case "dispose":
                        {
                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOHIT"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant hit in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion



                            else
                            {


                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Takes my items and throws them on the ground causing them to break*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Reloading client in [10] seconds..*", 0, ChatType.Shout));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateBullets(MySqlClient, 0);
                                Session.CharacterInfo.UpdateShotgun(MySqlClient, 20);
                                Session.CharacterInfo.UpdatePellet(MySqlClient, 20);
                                Session.CharacterInfo.UpdateKnife(MySqlClient, 20);
                            }
                            {

                            }
                            using (SqlDatabaseClient client32 = SqlDatabaseManager.GetClient())
                            {
                                if (!Session.InRoom)
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    Session.Stop(client32);
                                }
                                else
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    instanceByRoomId.RemoveCharacterFromRoom(Session.CharacterId);
                                    Session.Stop(client32);
                                }
                            }
                            return true;
                        }


                    #endregion
                    #region :reload
                    case "reload":
                        {
                            int time = RandomGenerator.GetNext(6, 20);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Logged out.. Reloading client [10] seconds*", 0, ChatType.Shout));

                            using (SqlDatabaseClient client32 = SqlDatabaseManager.GetClient())
                            {
                                if (!Session.InRoom)
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    Session.Stop(client32);
                                }
                                else
                                {
                                    Actor.ApplyEffect(13);
                                    System.Threading.Thread.Sleep(10000);
                                    instanceByRoomId.RemoveCharacterFromRoom(Session.CharacterId);
                                    Session.Stop(client32);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :startlearn
                    case "startlearn":

                        if (Session.CharacterInfo.Learning == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're already learning!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant learn, You're dead!", 0, ChatType.Whisper));
                            return true;
                        }

                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant learn, You're jailed!", 0, ChatType.Whisper));
                            return true;
                        }

                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {


                            if (61 == Instance.RoomId)
                            {

                                string figure_update = FigToUniFig(Session.CharacterInfo.Figure) + "sh-290-62.ch-3077-83-91.lg-3058-110";
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, figure_update, Session.CharacterInfo.Gender, "[LEARNING] Library ", Session.CharacterInfo.Score));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Starts to learn*", 0, ChatType.Shout));
                                Session.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                Session.CharacterInfo.Timer = 10;
                                Session.CharacterInfo.UpdateLearning(MySqlClient, 1);
                                Session.CharacterInfo.StartTimer("learning", Session);
                            }
                        }
                        return true;
                    #endregion
                    #region :stoplearn
                    case "stoplearn":
                        if (Session.CharacterInfo.Learning != 1)
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You cant stop learning, You're are not learning!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Dead == 1)
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You cant stop learning, You're are dead!", 0, ChatType.Whisper));
                            return true;
                        }
                        if (Session.CharacterInfo.Jailed == 1)
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "You cant stop learning, You're are in jail!", 0, ChatType.Whisper));
                            return true;
                        }
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Actor.Id, Actor.Figure, Session.CharacterInfo.Gender, Session.CharacterInfo.Motto, Session.CharacterInfo.Score));
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Stops learning*", 0, ChatType.Shout));
                            Session.CharacterInfo.UpdateLearning(MySqlClient, 0);
                            Session.CharacterInfo.isLearning = false;
                        }
                        return true;
                    #endregion
                    #endregion

                    #region Gang Commands (7)
                    #region :gform <name>
                    case "gform":
                    case "gangform":
                    case "gcreate":
                        {
                             string Gangname = UserInputFilter.FilterString(Bits[1].Trim());

                             Session.SendData(RoomChatComposer.Compose(Actor.Id, "Running gang checks...", 0, ChatType.Whisper));
                                 
                                
                             if (Bits.Length < 2)
                             {
                                 Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :gangform <gangname>", 0, ChatType.Whisper));
                                 return true;
                             }

                             if (Gangs.isInGang(Session))
                             {
                                 Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are already in a gang!", 0, ChatType.Whisper));
                                 return true;
                             }

                            if(Gangs.gangExists(Gangname))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "The '" + Gangname + "' gang already exists!", 0, ChatType.Whisper));
                                return true;
                            }

                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Creates the gang '" + Gangname + "'*", 0, ChatType.Shout));
                           Gangs.createGang(Session,Gangname);
                            int gangid = Gangs.getGangidbyName(Gangname);
                            
   
                            return true;
                        }
                    #endregion
                    #region :ghelp
                    case "ganghelp":
                    case "ghelp":
                        {
                            Session.SendData(MessageOfTheDayComposer.Compose("Commands List\n------------------------\n:ghelp - Open this dialog\n:ginvite x - Invite a user into your gang.\n:gform <gangname> - Create a gang\n:gaccept - Accept invite to join gang\n:gdeny - Deny invite to join gang\n:gleave - Leave a gang\n:gbackup <msg> - Send a message to all members of your gang"));
                            return true;
                        }
                    #endregion
                    #region :ginvite x
                    case "ginvite":
                    case "ganginvite":
                        {
                           
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :ganginvite <username>", 0, ChatType.Whisper));
                                return true;
                            }

                            if(!Gangs.isInGang(Session))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not in a gang!", 0, ChatType.Whisper));
                                return true;
                            }
                            int mGid = Gangs.getUsersGInf("gangid",Session);
                            int mGrid = Gangs.getUsersGInf("gangrank",Session);

                            if(!Gangs.gRankHasPwr(mGid,mGrid,"pwr_invite"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your gang rank is forbidden from recruiting!", 0, ChatType.Whisper));
                                return true;
                            }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                return true;
                            }

                            if(Gangs.isInGang(TargetSession))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is already in a gang.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Gangs.getUsersGInf("gangid", TargetSession) == Gangs.getUsersGInf("gangid", Session))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user is in your gang?", 0, ChatType.Whisper));
                                return true;
                            }
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Invites " + Username + "' to their gang '" + Gangs.getUsersgangName(Session) + "'*" , 0, ChatType.Shout));
                            TargetSession.SendData(RoomChatComposer.Compose(TargetActor.Id, Session.CharacterInfo.Username + " has invited you to their gang. Type :gaccept to accept or :gdeny to deny.", 0, ChatType.Whisper));
                            TargetSession.CharacterInfo.Ginvite = Gangs.getUsersGInf("gangid", Session);
                            
                         return true;
                        }

#endregion
                    #region :gaccept
                    case "gaccept":
                        {
                            if(Session.CharacterInfo.Ginvite < 1 || Session.CharacterInfo.Ginvite == 0)
                            {

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have no gang invites to accept!", 0, ChatType.Whisper));
                                return true;
                            }

                            string gangname = Gangs.getGangnamebyId(Session.CharacterInfo.Ginvite);
                            Gangs.setUsersGInf(Session, "gangid", Session.CharacterInfo.Ginvite);
                            Gangs.setUsersGInf(Session, "gangrank", 2);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Accepts request to join the gang '" + gangname + "'*", 0, ChatType.Shout));
                            Session.CharacterInfo.Ginvite = 0;
                            return true;
                        }
                    #endregion
                    #region :gdeny
                    case "gdeny":
                        {
                            if (Session.CharacterInfo.Ginvite < 1 || Session.CharacterInfo.Ginvite == 0)
                            {

                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have no gang invites to accept!", 0, ChatType.Whisper));
                                return true;
                            }

                            string gangname = Gangs.getGangnamebyId(Session.CharacterInfo.Ginvite);
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Denies request to join the gang '" + gangname + "'*", 0, ChatType.Shout));
                            Session.CharacterInfo.Ginvite = 0;

                            return true;
                        }
                    #endregion
                    #region :gbackup <msg>
                    case "gbackup":
                    case "galert":
                        {
                            if(!Gangs.isInGang(Session))
                            {
                                return true;
                            }

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax; :gangbackup/:galert <msg>", 0, ChatType.Whisper));
                                return true;
                            }

                            string gMsg = Input.Replace(Bits[0].ToLower(), "");
                            int gangid = Gangs.getUsersGInf("gangid", Session);
                            int gangrank = Gangs.getUsersGInf("gangrank",Session);


                            if(!Gangs.gRankHasPwr(gangid,gangrank,"pwr_alert"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your gang rank is forbidden from alerting!", 0, ChatType.Whisper));
                                return true;
                            }

                            Gangs.sentTogang(Session,gMsg);


                            return true;

                        }
                    #endregion
                    #region :gleave
                    case "gleave":
                        {
                            if (!Gangs.isInGang(Session))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not in a gang!", 0, ChatType.Whisper));
                                return true;
                            }

                            int gangid = Gangs.getUsersGInf("gangid", Session);

                            if ((int)Gangs.getGangInf(gangid, "owner") == Convert.ToInt32(Session.CharacterInfo.Id))
                            {

                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                foreach (string OnlineUser in OnlineUsers)
                                {
                                    Session GangSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    if (Gangs.getUsersGInf("gangid", GangSession) == gangid)
                                    {

                                        RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(GangSession.CharacterId));
                                        GangSession.SendData(RoomChatComposer.Compose(TargetActor.Id, "Since the Owner (" + Session.CharacterInfo.Username + ") has left the gang it has been deleted!", 0, ChatType.Whisper));
                                        Gangs.setUsersGInf(GangSession, "gangid", 0);
                                        Gangs.setUsersGInf(GangSession, "gangrank", 0);
                                        Gangs.deleteGang(gangid);
                                    }
                                }
                                return true;
                            }
                            else
                            {
                                Gangs.sentTogang(Session, "*Quits the Gang*");
                                Gangs.setUsersGInf(Session, "gangid", 0);
                                Gangs.setUsersGInf(Session, "gangrank", 0);
                                return true;
                            }

                            return true;
                        }
                    #endregion
                   
                    #endregion

                    #region Job Commands (18)
                    #region Hospital Commands (2)
                    #region :heal x
                    case "heal":
                        {
                            if (Session.CharacterInfo.GroupID == 4 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :heal <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Health == 100)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "This user dosen't need a heal.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Health > 80)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Heal(MySqlClient);
                                        ModerationLogs.LogModerationAction(MySqlClient, Session, "Healed user from server (chat command)",
                                           "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                    }

                                    TargetSession.CharacterInfo.poisoned = false;
                                    RPStats.updateStat(Session, "career_cur_xp", +5);
                                    RPStats.handleCXP(Session);

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Treats " + Username + " for major wounds [+5CP]*", 0, ChatType.Shout));
                                  
                                }
                                if (TargetSession.CharacterInfo.Health < 80)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Heal(MySqlClient);
                                        ModerationLogs.LogModerationAction(MySqlClient, Session, "Healed user from server (chat command)",
                                           "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Treats " + Username + " for major wounds [+5CP]*", 0, ChatType.Shout));
                                    RPStats.updateStat(Session, "career_cur_xp", +5);
                                    RPStats.handleCXP(Session);
                                    TargetSession.CharacterInfo.poisoned = false;
                                }

                                return true;
                            }
                            return true;
                        }
                    #endregion // HOSPITAL ONLY
                    #region :vac x
                    case "vac":
                        {
                            if (Session.CharacterInfo.GroupID == 4 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :vac <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }

                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                   
                                    TargetSession.CharacterInfo.Heal(MySqlClient);
                                    ModerationLogs.LogModerationAction(MySqlClient, Session, "Vacc'd user from server (chat command)",
                                       "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                    TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Inserts a massive needle into " + Username + "'s buttock*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Waits for the vaccine to drain into " + Username + "'s bloodstream*", 0, ChatType.Shout));
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pulls out the massive the needle out of " + Username + "'s buttocks and is now immune from the flu*", 0, ChatType.Shout));
                                TargetSession.CharacterInfo.poisoned = false;
                                TargetSession.CharacterInfo.Health = 100;
                            }
                            return true;
                        }
                    #endregion // HOSPITAL ONLY
                    #endregion

                    #region Police Commands (10)
                    #region :bail x
                    case "bail":
                        {

                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :bail <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (instanceByRoomId.Info.Description.Contains("NOBAIL"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't bail in this room.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                return true;
                            }
                            Username = TargetSession.CharacterInfo.Username;

                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            if (TargetSession.CharacterInfo.Jailed == 1)
                            {
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Pays the bail for " + Username + " [-$320]*", 0, ChatType.Shout));
                            }
                            if (TargetSession.CharacterInfo.Dead == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*This user isn't jailed*", 0, ChatType.Shout));

                            }
                            Username = Session.CharacterInfo.Username;

                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*You cannot bail yourself*", 0, ChatType.Whisper));
                            }
                            Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            {
                                int newcoins = Session.CharacterInfo.CreditsBalance - 320;
                                Session.SendData(CreditsBalanceComposer.Compose(newcoins));
                                Session.CharacterInfo.UpdateCreditsBalance(MySqlClient, -320);
                            }
                        }
                        return true;
                    #endregion
                    #region :checkbail x
                    case "checkbail":
                        {
                            #region Error - Syntax Error
                            if (Bits.Length < 2)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :checkbail <username>", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOBAIL"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cant bail in this room!", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion
                            #region Sessions

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = null;
                            RoomActor Target = null;
                            Bot TheBot = null;
                            bool isBot = false;
                            Vector2 PositionNow = new Vector2(0, 0);

                            foreach (RoomActor RoomActor1 in Instance.Actors)
                            {
                                if (RoomActor1.Type != RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                        Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                        isBot = false;
                                    }
                                }
                                else if (RoomActor1.Type == RoomActorType.AiBot)
                                {
                                    if (RoomActor1.Name.ToLower() == Username.ToLower())
                                    {
                                        TheBot = BotManager.GetBotDefinition(RoomActor1.Id);
                                        Username = RoomActor1.Name;
                                        PositionNow = RoomActor1.Position.GetVector2();
                                        Target = RoomActor1;
                                        isBot = true;
                                    }
                                }
                            }
                            #endregion
                            #region Error - Cant Find User
                            if (isBot == false)
                            {
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            #endregion

                            #region Rob User
                            Random _s = new Random();
                            int amount = RandomGenerator.GetNext(3, 16);
                            using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                            {
                                int HitPoint = _s.Next(1, 10);
                                Target.Health = (Target.Health - HitPoint);
                                ModerationLogs.LogModerationAction(MySqlClient, Session, "Hit user from server (chat command)",
                                   "User '" + TargetSession.CharacterInfo.Username + "' (ID " + TargetSession.CharacterId + ").");
                                if (Session.CharacterInfo.Dead == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot check bails, you're dead!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Session.CharacterInfo.Wanted == 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't check someones bail whilst wanted", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Jailed == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*This user isn't jailed*", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Checks the bail for " + Username + "*", 0, ChatType.Shout));
                                    Session.SendData(NotificationMessageComposer.Compose(TargetSession.CharacterInfo.Username + "'s bail is [$120]"));

                                }

                            #endregion
                                return true;
                            }
                        }
                    #endregion
                    #region :arrest x <time> <crime>
                    case "arrest":
                        {
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :arrest <username> <time /seconds>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int time = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                Username = TargetSession.CharacterInfo.Username;

                                if (!TargetActor.Stunned)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have to stun someone before arresting them!", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (time < 1)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You have to arrest someone for 1 or more minutes!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (time > 25)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot arrest someone for more than 25 minutes", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession.CharacterInfo.Wanted == 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*" + TargetSession.CharacterInfo.Username + " isn't wanted, so you cannot arrest them*", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to hand cuff " + Username + ", but misses.*", 0, ChatType.Shout));
                                    return true;
                                }
                                string figure_update = FigToUniFig(TargetSession.CharacterInfo.Figure) + "ch-220-94.lg-280-94.sh-290-62";
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, figure_update, TargetSession.CharacterInfo.Gender, "[PRISONER] " + TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    if (TargetSession.CharacterInfo.Wanted == 1)
                                    {
                                        TargetSession.CharacterInfo.UpdateWanted(MySqlClient, 0);
                                    }
                                    if (TargetSession.CharacterInfo.Tokens == 1)
                                    {
                                        TargetSession.CharacterInfo.UpdateTokens(MySqlClient, -1);
                                    }
                                    TargetSession.CharacterInfo.UpdateWeed(MySqlClient, 0);
                                    TargetSession.CharacterInfo.SetHomeRoom(MySqlClient, 9);
                                    TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 1);
                                    TargetSession.CharacterInfo.StartTimer("jail", TargetSession);

                                    TargetSession.CharacterInfo.Timer = time;
                                    TargetSession.CharacterInfo.Unmute(MySqlClient);

                                }

                                if (Session.CurrentRoomId.Equals(9))
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        DataRow JailBed = MySqlClient.ExecuteQueryRow("SELECT * FROM items WHERE definition_id = '43' AND room_id = '9' ORDER BY rand() LIMIT 1");
                                        Item Item = Instance.GetItem((uint)JailBed["id"]);
                                        TargetActor.MoveToPos(new Vector2(Item.RoomPosition.X, Item.RoomPosition.Y), true);
                                    }
                                }
                                else
                                {
                                    RoomHandler.PrepareRoom(TargetSession, 9, null, true);
                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Removes cuffs from belt and wraps them to " + Username + "'s Wrists and arrests " + Username + " for " + TargetSession.CharacterInfo.Timer + " minutes [+15CP]*", 0, ChatType.Shout));
                                
                                RPStats.updateStat(Session, "career_cur_xp", +15);
                                RPStats.handleCXP(Session);

                                TargetSession.SendData(NotificationMessageComposer.Compose("You've been arrested you for " + TargetSession.CharacterInfo.Timer + "minutes!"));
                            }
                        }
                        return true;
                    #endregion
                    #region :untaze x
                    case "unstun":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :unstun <username>", 0, ChatType.Whisper));
                                    return true;
                                }
                            }
                            if (TargetActor.Stunned)
                            {
                                TargetActor.Stunned = false;
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Unstuns " + Username + "*", 0, ChatType.Shout));

                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.Unmute(MySqlClient);
                                }
                                TargetActor.ApplyEffect(0);
                            }
                            else
                            {

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;



                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :release x
                    case "release":
                        {
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.Username.Contains("Ying") || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :release <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));


                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be arrested.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;

                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                if (TargetSession.CharacterInfo.Jailed == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateJailed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isJailed = false;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from jail*", 0, ChatType.Shout));
                                }
                                if (TargetSession.CharacterInfo.Dead == 1)
                                {
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateDead(MySqlClient, 0);
                                        TargetSession.CharacterInfo.isDead = false;
                                        TargetSession.CharacterInfo.Health = 100;
                                    }
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Releases " + Username + " from hospital*", 0, ChatType.Shout));
                                }
                                Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(TargetActor.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                            }
                        }
                        return true;
                    #endregion
                    #region :track x
                    case "track":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {



                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :track <username>", 0, ChatType.Whisper));
                                    return true;
                                }



                                if (TargetSession == null)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline or cannot be located.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;


                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Calls dispatch for a location on " + Username + "*", 0, ChatType.Shout));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Recieves the infomation from dispatch*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(0);
                                }
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "" + Username + " is currently in RoomID : " + TargetSession.CurrentRoomId + "", 0, ChatType.Whisper));

                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :stun x
                    case "stun":
                    case "taze":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (instanceByRoomId.Info.Description.Contains("TURF"))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't stun in turfs!", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :taze <username>", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to stun " + Username + ", but misses!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (session12.CharacterId == Session.CharacterId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot stun yourself?", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetActor.Stunned)
                                {
                                    TargetActor.Stunned = false;
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Unstuns " + Username + "*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(0);
                                }
                                else
                                {
                                    TargetActor.Stunned = true;
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Mute(MySqlClient, 15);
                                        TargetSession.SendData(RoomMutedComposer.Compose(15));
                                    }

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs my stun gun from my utility belt and fires it at " + Username + "*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(53);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :warn x <msg>
                    case "warn":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :warn x <msg>", 0, ChatType.Whisper));
                                    return true;
                                }




                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be warn'd.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;


                                {


                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Gives " + Username + " a warning!*", 0, ChatType.Shout));
                                    string msg = Input.Replace(Bits[0].ToLower(), "");
                                    TargetSession.SendData(UserAlertModernComposer.Compose("Warning", msg));

                                    TargetActor.ApplyEffect(0);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region :aw >username<
                    case "aw":
                        {

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                                RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                if (Actor.Name == Username2)
                                {
                                    return true;
                                }

                                string target = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                                RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "" + TargetSession.CharacterInfo.Username + " has been placed on the wanted list!", 0, ChatType.Whisper));
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.UpdateWanted(MySqlClient, 1);
                                }
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :rw x
                    case "rw":
                        {

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {


                                string Username2 = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession2 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username2));
                                RoomActor Target2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                RoomActor TargetActor2 = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession2.CharacterId));
                                if (Actor.Name == Username2)
                                {
                                    return true;
                                }

                                string target = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(target));
                                RoomActor TargetActor = Instance.GetActorByReferenceId(TargetSession.CharacterId);

                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "" + TargetSession.CharacterInfo.Username + " has been removed from the wanted list!", 0, ChatType.Whisper));
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {
                                    TargetSession.CharacterInfo.UpdateWanted(MySqlClient, 0);
                                }
                                Session.CharacterInfo.Cooldown = DateTime.Now;
                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :search x
                    case "search":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {



                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :su <username>", 0, ChatType.Whisper));
                                    return true;
                                }



                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to search " + Username + ", but fails to grab him!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;
                                {

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Searches " + Username + "*", 0, ChatType.Shout));
                                    TargetActor.ApplyEffect(0);
                                }
                                Session.SendData(MessageOfTheDayComposer.Compose("Username: " + Username + " \n\n Shotgun: " + TargetSession.CharacterInfo.Shotgun + "\n\n G24 Pistol: " + TargetSession.CharacterInfo.Pellet + "\n\n Wanted: " + TargetSession.CharacterInfo.Wanted + "\n\n Weed: " + TargetSession.CharacterInfo.Weed + "grams \n\n Knife: " + TargetSession.CharacterInfo.Knife + " "));
                                return true;
                            }
                        }
                        return true;
                    #endregion
                    #region :backup
                    case "backup":
                        {

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "[POLICE RADIO] Calling for back-up!", 0, ChatType.Shout));
                                SessionManager.BroadcastPolicePacket(UserAlertModernComposer.Compose("Police Radio", "Back-up call from officer: " + Session.CharacterInfo.Username + ", in duty room no: " + Instance.RoomId + ". Your immediate action is required!"));

                            }
                        }
                        return true;
                    #endregion
                    #region :spray x
                    case "spray":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            session12 = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(UserInputFilter.FilterString(@params[1].Trim(), false)));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :spray <username>", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to spray " + Username + ", but misses!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (session12.CharacterId == Session.CharacterId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You cannot spray yourself?", 0, ChatType.Whisper));
                                    return true;
                                }
                                if (instanceByRoomId.Info.Description.Contains("TURF"))
                                    if (instanceByRoomId.Info.Description.Contains("NOSPRAY"))

                                        Session.SendData(RoomChatComposer.Compose(Actor.Id, "This is a NOSPRAY room.", 0, ChatType.Whisper))
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't spray in turfs.", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetActor.Stunned)
                                {
                                    TargetActor.Stunned = false;
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs my watter bottle and pour's it into " + Username + "'s eyes causing the pepper spray to clear out*", 0, ChatType.Shout));

                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Unmute(MySqlClient);
                                    }
                                    TargetActor.ApplyEffect(0);
                                }
                                else
                                {
                                    TargetActor.Stunned = true;
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.Mute(MySqlClient, 5);

                                    }

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Grabs my pepper spray from my belt, spraying it into " + Username + "'s eyes causing them to stop*", 0, ChatType.Shout));

                                    TargetActor.ApplyEffect(0);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region confiscate x
                    case "confiscate":
                        {
                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));

                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.GroupID == 6 && Session.CharacterInfo.Working == 1)
                            {

                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :confiscate <username>", 0, ChatType.Whisper));
                                    return true;
                                }


                                if (Distance.Calculate(Actor.Position.GetVector2(), Target.Position.GetVector2()) > 3)
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Atempts to take " + Username + "'s stuff, but misses!*", 0, ChatType.Shout));
                                    return true;
                                }

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline, not in a room, or cannot be stunned.", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;
                                {
                                    TargetActor.Stunned = true;
                                    using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                    {
                                        TargetSession.CharacterInfo.UpdateShotgun(MySqlClient, 20);
                                        TargetSession.CharacterInfo.UpdateBullets(MySqlClient, 0);
                                        TargetSession.CharacterInfo.UpdateKnife(MySqlClient, 0);
                                        TargetSession.CharacterInfo.UpdateWeed(MySqlClient, 0);
                                        TargetSession.CharacterInfo.Mute(MySqlClient, 5);
                                    }

                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Takes " + Username + "'s illegal content with no questions asked*", 0, ChatType.Shout));

                                }
                            }
                        }
                        return true;
                    #endregion
                    #endregion

                    #region Bank Commands (1)
                    #region :startnuke
                    case "startnuke":
                        {
                            RPGames.nukeStarted = true;
                            SessionManager.BroadcastPacket(UserAlertModernComposer.Compose("[Hotel event]", "A nuclear bomb has been set off, the radioactivity will soon kill you, seek refuge in the hospital! Quick!"));
                           
                                List<string> OnlineUsers = SessionManager.ConnectedUserData.Values.ToList();
                                foreach (string OnlineUser in OnlineUsers)
                                {

                                    Session Player = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(OnlineUser));
                                    RPGames.initRPGame("nuke", Player);

                                }
                            return true;
                        }
                    #endregion

                    #region :withdraw x <amount>

                    case "withdraw":
                        {
                            if (!Session.HasRight("hotel_admin") || (Session.CharacterInfo.GroupID == 5 && Session.CharacterInfo.Working == 1))
                            {

                                if (Bits.Length < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :withdraw <username> <amount>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int amount = Int32.Parse(UserInputFilter.FilterString(Bits[2].Trim()));

                                if (amount <= 0)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "You are not allowed to set negative amounts..", 0, ChatType.Whisper));
                                    return true;
                                }

                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                                Username = TargetSession.CharacterInfo.Username;

                                if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline or not in a room.", 0, ChatType.Whisper));
                                    return true;
                                }

                                if (amount < 1 || amount > TargetSession.CharacterInfo.Bank)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "*" + Username + " only has c" + TargetSession.CharacterInfo.Bank + " in his bank account*", 0, ChatType.Whisper));
                                    return true;
                                }
                                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                                {

                                    int newamount = TargetSession.CharacterInfo.CreditsBalance + amount;
                                    int newbank = TargetSession.CharacterInfo.Bank - amount;
                                    TargetSession.CharacterInfo.UpdateBank(MySqlClient, -amount);
                                    TargetSession.CharacterInfo.UpdateCreditsBalance(MySqlClient, +amount);
                                    TargetSession.SendData(CreditsBalanceComposer.Compose(newamount));


                                }
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Withdraws " + amount + "c from " + Username + "'s bank account*", 0, ChatType.Shout));
                                RPStats.updateStat(Session, "career_cur_xp", +5);
                                RPStats.handleCXP(Session);
                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hands " + amount + "c to " + Username + " [+5CP]*", 0, ChatType.Shout));
                            }
                        }
                        return true;
                    #endregion
                    #region :checkbalance x
                    case "checkbalance":
                        {
                            if (Session.CharacterInfo.GroupID == 5 && Session.CharacterInfo.Working == 1)
                                if (Bits.Length < 3)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :checkbalance <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                            string Username = UserInputFilter.FilterString(Bits[1].Trim());
                            Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                            RoomActor Target = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            RoomActor TargetActor = (Instance == null ? null : Instance.GetActorByReferenceId(TargetSession.CharacterId));
                            Username = TargetSession.CharacterInfo.Username;

                            if (TargetSession == null || !TargetSession.InRoom || Session.AbsoluteRoomId != TargetSession.AbsoluteRoomId)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Target user '" + Username + "' is offline or not in a room.", 0, ChatType.Whisper));
                                return true;
                            }
                            else
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*" + Username + " only has c" + TargetSession.CharacterInfo.Bank + " in his bank account*", 0, ChatType.Whisper));
                                TargetSession.SendData(RoomChatComposer.Compose(Actor.Id, "*" + Username + " only has c" + TargetSession.CharacterInfo.Bank + " in his bank account*", 0, ChatType.Whisper));
                                return true;
                            }
                        }

                    #endregion
                    #endregion

                    #region Manager Commands (5)
                    #region :hire x
                    case "hire":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == (string)"manager")
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :hire <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == 2)
                                {
                                    DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '1'");
                                    string jobname = (string)Row1["name"] + " " + (string)Row4["name"];
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = '1' WHERE id = @userid LIMIT 1");
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.SetParameter("groupid", Session.CharacterInfo.GroupID);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = @groupid WHERE id = @userid LIMIT 1");
                                    TargetSession.CharacterInfo.UpdateGroupID(MySqlClient, Session.CharacterInfo.GroupID);
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Hires " + Username + " as " + jobname + "*", 0, ChatType.Shout));
                                    TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                    RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                    Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    return true;
                                }
                                else
                                {
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Attempts to hire " + Username + ", but notices they already have a job*", 0, ChatType.Shout));
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region :fire x
                    case "fire":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == "manager" || Session.HasRight("hotel_admin"))
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :fire <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = '1' WHERE id = @userid LIMIT 1");
                                    MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                    MySqlClient.ExecuteNonQuery("UPDATE users SET groupid = '2' WHERE id = @userid LIMIT 1");
                                    TargetSession.CharacterInfo.UpdateGroupID(MySqlClient, 2);
                                    TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                    Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Fires " + Username + " from their job*", 0, ChatType.Shout));
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region :promote x
                    case "promote":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == (string)"manager" || Session.HasRight("hotel_admin"))
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :promote <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + TargetSession.CharacterInfo.Id + "'");

                                    int newrank = (int)Row4["jobrank"] + 1;
                                    DataRow Row5 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + TargetSession.CharacterInfo.GroupID + "' AND rankid = '" + newrank + "'");
                                    DataRow Row6 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Row5["jobid"] + "'");
                                    int rowsInRow5 = int.Parse(MySqlClient.ExecuteScalar("SELECT COUNT(*) FROM jobranks WHERE jobid = '" + Row5["jobid"] + "' AND rankid = '" + newrank + "'").ToString());
                                    if (rowsInRow5 >= 1 && (string)Row5["rank"] != (string)"manager" || Session.HasRight("hotel_admin"))
                                    {
                                        string JobName = (string)Row6["name"] + " " + (string)Row5["name"];
                                        MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                        MySqlClient.SetParameter("rank", newrank);
                                        MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = @rank WHERE id = @userid LIMIT 1");
                                        Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Promotes " + Username + " to " + JobName + "*", 0, ChatType.Shout));
                                    }
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region :demote x
                    case "demote":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == (string)"manager" || Session.HasRight("hotel_admin"))
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :promote <username>", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    DataRow Row4 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + TargetSession.CharacterInfo.Id + "'");

                                    int newrank = (int)Row4["jobrank"] - 1;
                                    DataRow Row5 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + TargetSession.CharacterInfo.GroupID + "' AND rankid = '" + newrank + "'");
                                    DataRow Row6 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Row5["jobid"] + "'");
                                    int rowsInRow5 = int.Parse(MySqlClient.ExecuteScalar("SELECT COUNT(*) FROM jobranks WHERE jobid = '" + Row5["jobid"] + "' AND rankid = '" + newrank + "'").ToString());
                                    if (rowsInRow5 >= 1 && (string)Row5["rank"] != (string)"manager" || Session.HasRight("hotel_admin"))
                                    {
                                        string JobName = (string)Row6["name"] + " " + (string)Row5["name"];
                                        MySqlClient.SetParameter("userid", TargetSession.CharacterId);
                                        MySqlClient.SetParameter("rank", newrank);
                                        MySqlClient.ExecuteNonQuery("UPDATE users SET jobrank = @rank WHERE id = @userid LIMIT 1");
                                        Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                        Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Demotes " + Username + " to " + JobName + "*", 0, ChatType.Shout));
                                    }
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion

                    #region :sendhome x [time]
                    case "sendhome":
                        using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                        {
                            DataRow Row1 = MySqlClient.ExecuteQueryRow("SELECT * FROM groups_details WHERE id = '" + Session.CharacterInfo.GroupID + "'");
                            DataRow Row2 = MySqlClient.ExecuteQueryRow("SELECT * FROM users WHERE id = '" + Session.CharacterInfo.Id + "'");
                            DataRow Row3 = MySqlClient.ExecuteQueryRow("SELECT * FROM jobranks WHERE jobid = '" + Session.CharacterInfo.GroupID + "' AND rankid = '" + Row2["jobrank"] + "'");
                            if (Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == "manager" || Session.HasRight("hotel_admin") || Session.CharacterInfo.Working == 1 && (string)Row3["rank"] == "supervisor")
                            {
                                if (Bits.Length < 2)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Invalid syntax - :sendhome <username> [<time>]", 0, ChatType.Whisper));
                                    return true;
                                }

                                string Username = UserInputFilter.FilterString(Bits[1].Trim());
                                int Time = 900;
                                if (Bits.Length > 2)
                                {
                                    Time = int.Parse(Bits[2].Trim());
                                }
                                Session TargetSession = SessionManager.GetSessionByCharacterId(CharacterResolverCache.GetUidFromName(Username));
                                if (TargetSession == null || !TargetSession.InRoom)
                                {
                                    Session.SendData(RoomChatComposer.Compose(Actor.Id, "Could not find " + Username + " in this room!", 0, ChatType.Whisper));
                                    return true;
                                }
                                RoomActor Target = Instance.GetActorByReferenceId(TargetSession.CharacterId);
                                Username = TargetSession.CharacterInfo.Username;
                                if (TargetSession.CharacterInfo.GroupID == Session.CharacterInfo.GroupID || Session.HasRight("hotel_admin"))
                                {
                                    TargetSession.CharacterInfo.UpdateWorking(MySqlClient, 0);
                                    Instance.BroadcastMessage(UserInfoUpdateComposer.Compose(Target.Id, TargetSession.CharacterInfo.Figure, TargetSession.CharacterInfo.Gender, TargetSession.CharacterInfo.Motto, TargetSession.CharacterInfo.Score));
                                    Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Sends " + Username + " home for " + Time + " seconds*", 0, ChatType.Shout));
                                    SendHome(TargetSession, Time);
                                    return true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #endregion

                    #endregion

                    #region VIP Commands (3)

                    #region :moonwalk
                    case "moonwalk":
                        if (Actor.WalkingBackwards)
                        {
                            Actor.WalkingBackwards = false;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Moonwalk disabled!", 0, ChatType.Whisper));
                        }
                        else
                        {
                            Actor.WalkingBackwards = true;
                            Session.SendData(RoomChatComposer.Compose(Actor.Id, "Moonwalk enabled!", 0, ChatType.Whisper));
                        }
                        return true;
                    #endregion
                    #region :ba
                    case "ba":
                        {
                            #region cw
                            //games
                            if (Session.CharacterInfo.inCw == true)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Cannot do this in Color Wars", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            #region Cooldown
                            TimeSpan span = DateTime.Now - Session.CharacterInfo.Cooldown;
                            if (span.Seconds < 3)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You're cooling down! [" + span.Seconds + "/3]", 0, ChatType.Whisper));
                                return true;
                            }
                            #endregion

                            if (Session.CharacterInfo.Jailed == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, but you currently cannot equip your body armour.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (instanceByRoomId.Info.Description.Contains("NOBA"))
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "You can't use your body armour in this room.", 0, ChatType.Whisper));
                                return true;
                            }
                            if (Session.CharacterInfo.Dead == 1)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Sorry, but you currently cannot equip your body armour.", 0, ChatType.Whisper));
                                return true;
                            }

                            if (Session.CharacterInfo.GroupID == 2 || Session.CharacterInfo.GroupID == 4 || Session.CharacterInfo.GroupID == 5 || Session.CharacterInfo.GroupID == 6 || Session.CharacterInfo.GroupID == 7 || Session.CharacterInfo.GroupID == 8)
                            {
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "*Sorry, but you are not apart of the defence department!*", 0, ChatType.Whisper));
                            }




                            if (Session.CharacterInfo.GroupID == 3 || Session.CharacterInfo.Glock == 1 || Session.CharacterInfo.Shotgun == 1 || Session.HasRight("hotel_admin"))
                            {


                                Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Equips body armour*", 0, ChatType.Shout));
                                Session.SendData(RoomChatComposer.Compose(Actor.Id, "Your health is now at [150HP]", 0, ChatType.Whisper));
                                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
                                Session.CharacterInfo.UpdateHealth(MySqlClient, 150);
                                Session.CharacterInfo.Cooldown = DateTime.Now;

                            }
 
                            {

                                return true;
                            }
                        }

                    #endregion
                    #region :enable
                    case "enable":
                        {
                            if (!Session.HasRight("hotel_admin"))
                            {
                                return false;
                            }

                            int effect = Convert.ToInt32(Bits[1]);
                            Actor.ApplyEffect(effect);
                            return true;
                        }
                    #endregion
                    #region :stopdrive
                    case "stopdrive":

                        if (Session.CurrentEffect == 0)
                        {
                            
                            Actor.ApplyEffect(0);
                        }

                        else
                        {
                            Actor.ApplyEffect(0);
                        }
                        {
                            Instance.BroadcastMessage(RoomChatComposer.Compose(Actor.Id, "*Takes the key out of the ignition.*", 0, ChatType.Shout));
                        }
                        return true;
                    #endregion
                    #endregion
      
                }

                return false;
            }
            catch (Exception e)
            {
                //Session.SendData(MessageOfTheDayComposer.Compose("Error in Command " + Bits[0].ToLower() + ": " + e.Message + "\n\n" + e.StackTrace));
                string text = System.IO.File.ReadAllText(Environment.CurrentDirectory + "\\error-log.txt");
                Output.WriteLine("Error in Command " + Bits[0].ToLower() + ": " + e.Message);
                System.IO.StreamWriter file = new System.IO.StreamWriter(Environment.CurrentDirectory + "\\error-log.txt");
                file.WriteLine(text + "Error in Command " + Bits[0].ToLower() + ": " + e.Message + "\n\n" + e.StackTrace,
                    OutputLevel.Notification + "\n\n");
                file.Close();
                return false;
            }
        }

        private static void sendData(string p)
        {
            throw new NotImplementedException();
        }


        public static bool SendHome(Session Session, int Time)
        {
            Session.CharacterInfo.UpdateSentHome(1);
            Time = Time * 1000;
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(Time);
            dispatcherTimer.Interval = Time;
            dispatcherTimer.Elapsed += delegate { FinishSendHome(Session, dispatcherTimer); };
            dispatcherTimer.Start();
            return true;
        }

        public static bool FinishSendHome(Session Session, System.Timers.Timer Timer)
        {
            Timer.Dispose();
            Timer.Stop();
            Session.CharacterInfo.UpdateSentHome(0);
            return true;
        }
        public static bool HandleTaxi(Session Session, RoomActor Actor, uint RoomID, bool instant = false)
        {
            int time = RandomGenerator.GetNext(6, 20);
            time = time * 600;
            if (instant)
            {
                time = 1;
            }
            else
            {
                SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient();
            }
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteTaxi(Session, Actor, RoomID, dispatcherTimer); };
            dispatcherTimer.Start();
            return true;
        }
        public static bool HandleKiss(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(9);
            Actor2.ApplyEffect(9);
            return true;
        }
        public static bool HandleMarry(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(1);
            Actor2.ApplyEffect(1);
            return true;
        }
        public static bool HandleSnog(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(9);
            Actor2.ApplyEffect(9);
            return true;
        }
        public static bool HandleRape(int time, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            System.Timers.Timer dispatcherTimer = new System.Timers.Timer(time);
            dispatcherTimer.Interval = time;
            dispatcherTimer.Elapsed += delegate { ExecuteKiss(dispatcherTimer, Session, Actor1, Actor2); };
            dispatcherTimer.Start();

            Actor1.ApplyEffect(4);
            Actor2.ApplyEffect(4);
            return true;
        }
        public static bool ExecuteTaxi(Session Session, RoomActor Actor, uint RoomID, System.Timers.Timer Timer)
        {
            Timer.Dispose();
            Timer.Stop();
            if (Session.CharacterInfo.Dead != 1 && Session.CharacterInfo.Jailed != 1)
            {
                using (SqlDatabaseClient MySqlClient = SqlDatabaseManager.GetClient())
                {
                    Session.CharacterInfo.SetHomeRoom(MySqlClient, RoomID);
                    RoomHandler.PrepareRoom(Session, RoomID, null, true);
                }
            }
            return true;
        }
        public static bool ExecuteKiss(System.Timers.Timer Timer, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            Timer.Dispose();
            Timer.Stop();

            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            foreach (RoomActor Actor in Instance.Actors)
            {
                if (Actor.Name == Actor2.Name)
                {
                    Actor2.ApplyEffect(0);
                }
            }
            Actor1.ApplyEffect(0);

            return true;
        }
        public static bool ExecuteSnog(System.Timers.Timer Timer, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            Timer.Dispose();
            Timer.Stop();

            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            foreach (RoomActor Actor in Instance.Actors)
            {
                if (Actor.Name == Actor2.Name)
                {
                    Actor2.ApplyEffect(0);
                }
            }
            Actor1.ApplyEffect(0);

            return true;
        }
        public static string MergeParams(string[] Params, int Start)
        {
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < Params.Length; i++)
            {
                if (i >= Start)
                 {
                    if (i > Start)
                    {
                        builder.Append(" ");
                    }
                    builder.Append(Params[i]);
                }
            }
            return builder.ToString();
        }

        public static bool ExecutRape(System.Timers.Timer Timer, Session Session, RoomActor Actor1, RoomActor Actor2)
        {
            Timer.Dispose();
            Timer.Stop();

            RoomInstance Instance = RoomManager.GetInstanceByRoomId(Session.CurrentRoomId);
            foreach (RoomActor Actor in Instance.Actors)
            {
                if (Actor.Name == Actor2.Name)
                {
                    Actor2.ApplyEffect(0);
                }
            }
            Actor1.ApplyEffect(0);

            return true;
        }

        public static SqlDatabaseClient MySqlClient { get; set; }

        public static object args { get; set; }

        public static string Username { get; set; }

        public static object _Username { get; set; }

        public static string userID { get; set; }

        public static string Reason { get; set; }

        public static string crime { get; set; }
    }
}
